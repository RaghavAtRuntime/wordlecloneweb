{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/easing/index.mjs","../../node_modules/svelte/transition/index.mjs","../../src/popup.svelte","../../src/darkmode.svelte","../../src/sidebar.svelte","../../src/words.js","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export { identity as linear } from '../internal/index.mjs';\n\n/*\nAdapted from https://github.com/mattdesl\nDistributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md\n*/\nfunction backInOut(t) {\n    const s = 1.70158 * 1.525;\n    if ((t *= 2) < 1)\n        return 0.5 * (t * t * ((s + 1) * t - s));\n    return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);\n}\nfunction backIn(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n}\nfunction backOut(t) {\n    const s = 1.70158;\n    return --t * t * ((s + 1) * t + s) + 1;\n}\nfunction bounceOut(t) {\n    const a = 4.0 / 11.0;\n    const b = 8.0 / 11.0;\n    const c = 9.0 / 10.0;\n    const ca = 4356.0 / 361.0;\n    const cb = 35442.0 / 1805.0;\n    const cc = 16061.0 / 1805.0;\n    const t2 = t * t;\n    return t < a\n        ? 7.5625 * t2\n        : t < b\n            ? 9.075 * t2 - 9.9 * t + 3.4\n            : t < c\n                ? ca * t2 - cb * t + cc\n                : 10.8 * t * t - 20.52 * t + 10.72;\n}\nfunction bounceInOut(t) {\n    return t < 0.5\n        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\n}\nfunction bounceIn(t) {\n    return 1.0 - bounceOut(1.0 - t);\n}\nfunction circInOut(t) {\n    if ((t *= 2) < 1)\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n}\nfunction circIn(t) {\n    return 1.0 - Math.sqrt(1.0 - t * t);\n}\nfunction circOut(t) {\n    return Math.sqrt(1 - --t * t);\n}\nfunction cubicInOut(t) {\n    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\nfunction cubicIn(t) {\n    return t * t * t;\n}\nfunction cubicOut(t) {\n    const f = t - 1.0;\n    return f * f * f + 1.0;\n}\nfunction elasticInOut(t) {\n    return t < 0.5\n        ? 0.5 *\n            Math.sin(((+13.0 * Math.PI) / 2) * 2.0 * t) *\n            Math.pow(2.0, 10.0 * (2.0 * t - 1.0))\n        : 0.5 *\n            Math.sin(((-13.0 * Math.PI) / 2) * (2.0 * t - 1.0 + 1.0)) *\n            Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) +\n            1.0;\n}\nfunction elasticIn(t) {\n    return Math.sin((13.0 * t * Math.PI) / 2) * Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction elasticOut(t) {\n    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);\n}\nfunction expoInOut(t) {\n    return t === 0.0 || t === 1.0\n        ? t\n        : t < 0.5\n            ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)\n            : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;\n}\nfunction expoIn(t) {\n    return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction expoOut(t) {\n    return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);\n}\nfunction quadInOut(t) {\n    t /= 0.5;\n    if (t < 1)\n        return 0.5 * t * t;\n    t--;\n    return -0.5 * (t * (t - 2) - 1);\n}\nfunction quadIn(t) {\n    return t * t;\n}\nfunction quadOut(t) {\n    return -t * (t - 2.0);\n}\nfunction quartInOut(t) {\n    return t < 0.5\n        ? +8.0 * Math.pow(t, 4.0)\n        : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0;\n}\nfunction quartIn(t) {\n    return Math.pow(t, 4.0);\n}\nfunction quartOut(t) {\n    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\n}\nfunction quintInOut(t) {\n    if ((t *= 2) < 1)\n        return 0.5 * t * t * t * t * t;\n    return 0.5 * ((t -= 2) * t * t * t * t + 2);\n}\nfunction quintIn(t) {\n    return t * t * t * t * t;\n}\nfunction quintOut(t) {\n    return --t * t * t * t * t + 1;\n}\nfunction sineInOut(t) {\n    return -0.5 * (Math.cos(Math.PI * t) - 1);\n}\nfunction sineIn(t) {\n    const v = Math.cos(t * Math.PI * 0.5);\n    if (Math.abs(v) < 1e-14)\n        return 1;\n    else\n        return 1 - v;\n}\nfunction sineOut(t) {\n    return Math.sin((t * Math.PI) / 2);\n}\n\nexport { backIn, backInOut, backOut, bounceIn, bounceInOut, bounceOut, circIn, circInOut, circOut, cubicIn, cubicInOut, cubicOut, elasticIn, elasticInOut, elasticOut, expoIn, expoInOut, expoOut, quadIn, quadInOut, quadOut, quartIn, quartInOut, quartOut, quintIn, quintInOut, quintOut, sineIn, sineInOut, sineOut };\n","import { cubicInOut, linear, cubicOut } from '../easing/index.mjs';\nimport { is_function, assign } from '../internal/index.mjs';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nfunction blur(node, { delay = 0, duration = 400, easing = cubicInOut, amount = 5, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const f = style.filter === 'none' ? '' : style.filter;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `opacity: ${target_opacity - (od * u)}; filter: ${f} blur(${u * amount}px);`\n    };\n}\nfunction fade(node, { delay = 0, duration = 400, easing = linear } = {}) {\n    const o = +getComputedStyle(node).opacity;\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => `opacity: ${t * o}`\n    };\n}\nfunction fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `\n\t\t\ttransform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);\n\t\t\topacity: ${target_opacity - (od * u)}`\n    };\n}\nfunction slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {\n    const style = getComputedStyle(node);\n    const opacity = +style.opacity;\n    const height = parseFloat(style.height);\n    const padding_top = parseFloat(style.paddingTop);\n    const padding_bottom = parseFloat(style.paddingBottom);\n    const margin_top = parseFloat(style.marginTop);\n    const margin_bottom = parseFloat(style.marginBottom);\n    const border_top_width = parseFloat(style.borderTopWidth);\n    const border_bottom_width = parseFloat(style.borderBottomWidth);\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => 'overflow: hidden;' +\n            `opacity: ${Math.min(t * 20, 1) * opacity};` +\n            `height: ${t * height}px;` +\n            `padding-top: ${t * padding_top}px;` +\n            `padding-bottom: ${t * padding_bottom}px;` +\n            `margin-top: ${t * margin_top}px;` +\n            `margin-bottom: ${t * margin_bottom}px;` +\n            `border-top-width: ${t * border_top_width}px;` +\n            `border-bottom-width: ${t * border_bottom_width}px;`\n    };\n}\nfunction scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const sd = 1 - start;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `\n\t\t\ttransform: ${transform} scale(${1 - (sd * u)});\n\t\t\topacity: ${target_opacity - (od * u)}\n\t\t`\n    };\n}\nfunction draw(node, { delay = 0, speed, duration, easing = cubicInOut } = {}) {\n    let len = node.getTotalLength();\n    const style = getComputedStyle(node);\n    if (style.strokeLinecap !== 'butt') {\n        len += parseInt(style.strokeWidth);\n    }\n    if (duration === undefined) {\n        if (speed === undefined) {\n            duration = 800;\n        }\n        else {\n            duration = len / speed;\n        }\n    }\n    else if (typeof duration === 'function') {\n        duration = duration(len);\n    }\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`\n    };\n}\nfunction crossfade(_a) {\n    var { fallback } = _a, defaults = __rest(_a, [\"fallback\"]);\n    const to_receive = new Map();\n    const to_send = new Map();\n    function crossfade(from, node, params) {\n        const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);\n        const to = node.getBoundingClientRect();\n        const dx = from.left - to.left;\n        const dy = from.top - to.top;\n        const dw = from.width / to.width;\n        const dh = from.height / to.height;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        const opacity = +style.opacity;\n        return {\n            delay,\n            duration: is_function(duration) ? duration(d) : duration,\n            easing,\n            css: (t, u) => `\n\t\t\t\topacity: ${t * opacity};\n\t\t\t\ttransform-origin: top left;\n\t\t\t\ttransform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});\n\t\t\t`\n        };\n    }\n    function transition(items, counterparts, intro) {\n        return (node, params) => {\n            items.set(params.key, {\n                rect: node.getBoundingClientRect()\n            });\n            return () => {\n                if (counterparts.has(params.key)) {\n                    const { rect } = counterparts.get(params.key);\n                    counterparts.delete(params.key);\n                    return crossfade(rect, node, params);\n                }\n                // if the node is disappearing altogether\n                // (i.e. wasn't claimed by the other list)\n                // then we need to supply an outro\n                items.delete(params.key);\n                return fallback && fallback(node, params, intro);\n            };\n        };\n    }\n    return [\n        transition(to_send, to_receive, false),\n        transition(to_receive, to_send, true)\n    ];\n}\n\nexport { blur, crossfade, draw, fade, fly, scale, slide };\n","<script lang=\"ts\">\r\n    import { fade } from \"svelte/transition\";\r\n\r\n    export let message: string;\r\n    export let onClose: () => void;\r\n</script>\r\n\r\n<div class=\"popup\" in:fade out:fade>\r\n    <h1>{message}</h1>\r\n\r\n    <button on:click={onClose}>Close</button>\r\n</div>\r\n\r\n<style>\r\n    .popup {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background-color: #fff;\r\n        border-radius: 5px;\r\n        box-shadow: 5px 10px 18px #888888;\r\n        padding: 10px;\r\n\r\n        font-size: large;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    let theme: \"dark\" | \"light\" = \"light\";\r\n\r\n    function applyTheme() {\r\n        if (theme === \"dark\") {\r\n            window.document.body.classList.add(\"dark-mode\");\r\n        } else {\r\n            window.document.body.classList.remove(\"dark-mode\");\r\n        }\r\n    }\r\n\r\n    if (\r\n        window.matchMedia &&\r\n        window.matchMedia(\"(prefers-color-scheme: dark)\").matches\r\n    ) {\r\n        theme = \"dark\";\r\n    }\r\n\r\n    const localTheme = localStorage.getItem(\"theme\");\r\n    if (localTheme === \"light\" || localTheme === \"dark\") {\r\n        theme = localTheme;\r\n    }\r\n\r\n    applyTheme();\r\n\r\n    function click() {\r\n        if (theme === \"dark\") {\r\n            theme = \"light\";\r\n        } else {\r\n            theme = \"dark\";\r\n        }\r\n        applyTheme();\r\n        console.log(theme);\r\n        localStorage.setItem(\"theme\", theme);\r\n    }\r\n</script>\r\n\r\n<button on:click={click}>🌓</button>\r\n\r\n<style>\r\n</style>\r\n","<script lang=\"ts\">\r\n    import Darkmode from \"./darkmode.svelte\";\r\n\r\n    export let game;\r\n\r\n    let timeElapsed = \"00:00:00\";\r\n    setInterval(() => {\r\n        if (game.endTimer) return;\r\n\r\n        timeElapsed = new Date(Date.now() - game.started)\r\n            .toISOString()\r\n            .substr(11, 8);\r\n    }, 1000);\r\n</script>\r\n\r\n<div class=\"sidebar\">\r\n    <Darkmode />\r\n    <button on:click={() => location.reload()}>Reset</button>\r\n    <h3 class=\"timer\">{timeElapsed}</h3>\r\n</div>\r\n\r\n<style>\r\n    .sidebar {\r\n        position: absolute;\r\n        top: 10px;\r\n        right: 10px;\r\n        transition: background-color 0.3s;\r\n        text-align: right;\r\n    }\r\n\r\n    .timer {\r\n        color: gray;\r\n        transition: background-color 0.3s;\r\n    }\r\n\r\n    :global(body.dark-mode) .timer {\r\n        color: lightgray;\r\n    }\r\n</style>\r\n","const guesses = [\"which\", \"there\", \"their\", \"about\", \"would\", \"these\", \"other\", \"words\", \"could\", \"write\", \"first\", \"water\", \"after\", \"where\", \"right\", \"think\", \"three\", \"years\", \"place\", \"sound\", \"great\", \"again\", \"still\", \"every\", \"small\", \"found\", \"those\", \"never\", \"under\", \"might\", \"while\", \"house\", \"world\", \"below\", \"asked\", \"going\", \"large\", \"until\", \"along\", \"shall\", \"being\", \"often\", \"earth\", \"began\", \"since\", \"study\", \"night\", \"light\", \"above\", \"paper\", \"parts\", \"young\", \"story\", \"point\", \"times\", \"heard\", \"whole\", \"white\", \"given\", \"means\", \"music\", \"miles\", \"thing\", \"today\", \"later\", \"using\", \"money\", \"lines\", \"order\", \"group\", \"among\", \"learn\", \"known\", \"space\", \"table\", \"early\", \"trees\", \"short\", \"hands\", \"state\", \"black\", \"shown\", \"stood\", \"front\", \"voice\", \"kinds\", \"makes\", \"comes\", \"close\", \"power\", \"lived\", \"vowel\", \"taken\", \"built\", \"heart\", \"ready\", \"quite\", \"class\", \"bring\", \"round\", \"horse\", \"shows\", \"piece\", \"green\", \"stand\", \"birds\", \"start\", \"river\", \"tried\", \"least\", \"field\", \"whose\", \"girls\", \"leave\", \"added\", \"color\", \"third\", \"hours\", \"moved\", \"plant\", \"doing\", \"names\", \"forms\", \"heavy\", \"ideas\", \"cried\", \"check\", \"floor\", \"begin\", \"woman\", \"alone\", \"plane\", \"spell\", \"watch\", \"carry\", \"wrote\", \"clear\", \"named\", \"books\", \"child\", \"glass\", \"human\", \"takes\", \"party\", \"build\", \"seems\", \"blood\", \"sides\", \"seven\", \"mouth\", \"solve\", \"north\", \"value\", \"death\", \"maybe\", \"happy\", \"tells\", \"gives\", \"looks\", \"shape\", \"lives\", \"steps\", \"areas\", \"sense\", \"speak\", \"force\", \"ocean\", \"speed\", \"women\", \"metal\", \"south\", \"grass\", \"scale\", \"cells\", \"lower\", \"sleep\", \"wrong\", \"pages\", \"ships\", \"needs\", \"rocks\", \"eight\", \"major\", \"level\", \"total\", \"ahead\", \"reach\", \"stars\", \"store\", \"sight\", \"terms\", \"catch\", \"works\", \"board\", \"cover\", \"songs\", \"equal\", \"stone\", \"waves\", \"guess\", \"dance\", \"spoke\", \"break\", \"cause\", \"radio\", \"weeks\", \"lands\", \"basic\", \"liked\", \"trade\", \"fresh\", \"final\", \"fight\", \"meant\", \"drive\", \"spent\", \"local\", \"waxes\", \"knows\", \"train\", \"bread\", \"homes\", \"teeth\", \"coast\", \"thick\", \"brown\", \"clean\", \"quiet\", \"sugar\", \"facts\", \"steel\", \"forth\", \"rules\", \"notes\", \"units\", \"peace\", \"month\", \"verbs\", \"seeds\", \"helps\", \"sharp\", \"visit\", \"woods\", \"chief\", \"walls\", \"cross\", \"wings\", \"grown\", \"cases\", \"foods\", \"crops\", \"fruit\", \"stick\", \"wants\", \"stage\", \"sheep\", \"nouns\", \"plain\", \"drink\", \"bones\", \"apart\", \"turns\", \"moves\", \"touch\", \"angle\", \"based\", \"range\", \"marks\", \"tired\", \"older\", \"farms\", \"spend\", \"shoes\", \"goods\", \"chair\", \"twice\", \"cents\", \"empty\", \"alike\", \"style\", \"broke\", \"pairs\", \"count\", \"enjoy\", \"score\", \"shore\", \"roots\", \"paint\", \"heads\", \"shook\", \"serve\", \"angry\", \"crowd\", \"wheel\", \"quick\", \"dress\", \"share\", \"alive\", \"noise\", \"solid\", \"cloth\", \"signs\", \"hills\", \"types\", \"drawn\", \"worth\", \"truck\", \"piano\", \"upper\", \"loved\", \"usual\", \"faces\", \"drove\", \"cabin\", \"boats\", \"towns\", \"proud\", \"court\", \"model\", \"prime\", \"fifty\", \"plans\", \"yards\", \"prove\", \"tools\", \"price\", \"sheet\", \"smell\", \"boxes\", \"raise\", \"match\", \"truth\", \"roads\", \"threw\", \"enemy\", \"lunch\", \"chart\", \"scene\", \"graph\", \"doubt\", \"guide\", \"winds\", \"block\", \"grain\", \"smoke\", \"mixed\", \"games\", \"wagon\", \"sweet\", \"topic\", \"extra\", \"plate\", \"title\", \"knife\", \"fence\", \"falls\", \"cloud\", \"wheat\", \"plays\", \"enter\", \"broad\", \"steam\", \"atoms\", \"press\", \"lying\", \"basis\", \"clock\", \"taste\", \"grows\", \"thank\", \"storm\", \"agree\", \"brain\", \"track\", \"smile\", \"funny\", \"beach\", \"stock\", \"hurry\", \"saved\", \"sorry\", \"giant\", \"trail\", \"offer\", \"ought\", \"rough\", \"daily\", \"avoid\", \"keeps\", \"throw\", \"allow\", \"cream\", \"laugh\", \"edges\", \"teach\", \"frame\", \"bells\", \"dream\", \"magic\", \"occur\", \"ended\", \"chord\", \"false\", \"skill\", \"holes\", \"dozen\", \"brave\", \"apple\", \"climb\", \"outer\", \"pitch\", \"ruler\", \"holds\", \"fixed\", \"costs\", \"calls\", \"blank\", \"staff\", \"labor\", \"eaten\", \"youth\", \"tones\", \"honor\", \"globe\", \"gases\", \"doors\", \"poles\", \"loose\", \"apply\", \"tears\", \"exact\", \"brush\", \"chest\", \"layer\", \"whale\", \"minor\", \"faith\", \"tests\", \"judge\", \"items\", \"worry\", \"waste\", \"hoped\", \"strip\", \"begun\", \"aside\", \"lakes\", \"bound\", \"depth\", \"candy\", \"event\", \"worse\", \"aware\", \"shell\", \"rooms\", \"ranch\", \"image\", \"snake\", \"aloud\", \"dried\", \"likes\", \"motor\", \"pound\", \"knees\", \"refer\", \"fully\", \"chain\", \"shirt\", \"flour\", \"drops\", \"spite\", \"orbit\", \"banks\", \"shoot\", \"curve\", \"tribe\", \"tight\", \"blind\", \"slept\", \"shade\", \"claim\", \"flies\", \"theme\", \"queen\", \"fifth\", \"union\", \"hence\", \"straw\", \"entry\", \"issue\", \"birth\", \"feels\", \"anger\", \"brief\", \"rhyme\", \"glory\", \"guard\", \"flows\", \"flesh\", \"owned\", \"trick\", \"yours\", \"sizes\", \"noted\", \"width\", \"burst\", \"route\", \"lungs\", \"uncle\", \"bears\", \"royal\", \"kings\", \"forty\", \"trial\", \"cards\", \"brass\", \"opera\", \"chose\", \"owner\", \"vapor\", \"beats\", \"mouse\", \"tough\", \"wires\", \"meter\", \"tower\", \"finds\", \"inner\", \"stuck\", \"arrow\", \"poems\", \"label\", \"swing\", \"solar\", \"truly\", \"tense\", \"beans\", \"split\", \"rises\", \"weigh\", \"hotel\", \"stems\", \"pride\", \"swung\", \"grade\", \"digit\", \"badly\", \"boots\", \"pilot\", \"sales\", \"swept\", \"lucky\", \"prize\", \"stove\", \"tubes\", \"acres\", \"wound\", \"steep\", \"slide\", \"trunk\", \"error\", \"porch\", \"slave\", \"exist\", \"faced\", \"mines\", \"marry\", \"juice\", \"raced\", \"waved\", \"goose\", \"trust\", \"fewer\", \"favor\", \"mills\", \"views\", \"joint\", \"eager\", \"spots\", \"blend\", \"rings\", \"adult\", \"index\", \"nails\", \"horns\", \"balls\", \"flame\", \"rates\", \"drill\", \"trace\", \"skins\", \"waxed\", \"seats\", \"stuff\", \"ratio\", \"minds\", \"dirty\", \"silly\", \"coins\", \"hello\", \"trips\", \"leads\", \"rifle\", \"hopes\", \"bases\", \"shine\", \"bench\", \"moral\", \"fires\", \"meals\", \"shake\", \"shops\", \"cycle\", \"movie\", \"slope\", \"canoe\", \"teams\", \"folks\", \"fired\", \"bands\", \"thumb\", \"shout\", \"canal\", \"habit\", \"reply\", \"ruled\", \"fever\", \"crust\", \"shelf\", \"walks\", \"midst\", \"crack\", \"print\", \"tales\", \"coach\", \"stiff\", \"flood\", \"verse\", \"awake\", \"rocky\", \"march\", \"fault\", \"swift\", \"faint\", \"civil\", \"ghost\", \"feast\", \"blade\", \"limit\", \"germs\", \"reads\", \"ducks\", \"dairy\", \"worst\", \"gifts\", \"lists\", \"stops\", \"rapid\", \"brick\", \"claws\", \"beads\", \"beast\", \"skirt\", \"cakes\", \"lions\", \"frogs\", \"tries\", \"nerve\", \"grand\", \"armed\", \"treat\", \"honey\", \"moist\", \"legal\", \"penny\", \"crown\", \"shock\", \"taxes\", \"sixty\", \"altar\", \"pulls\", \"sport\", \"drums\", \"talks\", \"dying\", \"dates\", \"drank\", \"blows\", \"lever\", \"wages\", \"proof\", \"drugs\", \"tanks\", \"sings\", \"tails\", \"pause\", \"herds\", \"arose\", \"hated\", \"clues\", \"novel\", \"shame\", \"burnt\", \"races\", \"flash\", \"weary\", \"heels\", \"token\", \"coats\", \"spare\", \"shiny\", \"alarm\", \"dimes\", \"sixth\", \"clerk\", \"mercy\", \"sunny\", \"guest\", \"float\", \"shone\", \"pipes\", \"worms\", \"bills\", \"sweat\", \"suits\", \"smart\", \"upset\", \"rains\", \"sandy\", \"rainy\", \"parks\", \"sadly\", \"fancy\", \"rider\", \"unity\", \"bunch\", \"rolls\", \"crash\", \"craft\", \"newly\", \"gates\", \"hatch\", \"paths\", \"funds\", \"wider\", \"grace\", \"grave\", \"tides\", \"admit\", \"shift\", \"sails\", \"pupil\", \"tiger\", \"angel\", \"cruel\", \"agent\", \"drama\", \"urged\", \"patch\", \"nests\", \"vital\", \"sword\", \"blame\", \"weeds\", \"screw\", \"vocal\", \"bacon\", \"chalk\", \"cargo\", \"crazy\", \"acted\", \"goats\", \"arise\", \"witch\", \"loves\", \"queer\", \"dwell\", \"backs\", \"ropes\", \"shots\", \"merry\", \"phone\", \"cheek\", \"peaks\", \"ideal\", \"beard\", \"eagle\", \"creek\", \"cries\", \"ashes\", \"stall\", \"yield\", \"mayor\", \"opens\", \"input\", \"fleet\", \"tooth\", \"cubic\", \"wives\", \"burns\", \"poets\", \"apron\", \"spear\", \"organ\", \"cliff\", \"stamp\", \"paste\", \"rural\", \"baked\", \"chase\", \"slice\", \"slant\", \"knock\", \"noisy\", \"sorts\", \"stays\", \"wiped\", \"blown\", \"piled\", \"clubs\", \"cheer\", \"widow\", \"twist\", \"tenth\", \"hides\", \"comma\", \"sweep\", \"spoon\", \"stern\", \"crept\", \"maple\", \"deeds\", \"rides\", \"muddy\", \"crime\", \"jelly\", \"ridge\", \"drift\", \"dusty\", \"devil\", \"tempo\", \"humor\", \"sends\", \"steal\", \"tents\", \"waist\", \"roses\", \"reign\", \"noble\", \"cheap\", \"dense\", \"linen\", \"geese\", \"woven\", \"posts\", \"hired\", \"wrath\", \"salad\", \"bowed\", \"tires\", \"shark\", \"belts\", \"grasp\", \"blast\", \"polar\", \"fungi\", \"tends\", \"pearl\", \"loads\", \"jokes\", \"veins\", \"frost\", \"hears\", \"loses\", \"hosts\", \"diver\", \"phase\", \"toads\", \"alert\", \"tasks\", \"seams\", \"coral\", \"focus\", \"naked\", \"puppy\", \"jumps\", \"spoil\", \"quart\", \"macro\", \"fears\", \"flung\", \"spark\", \"vivid\", \"brook\", \"steer\", \"spray\", \"decay\", \"ports\", \"socks\", \"urban\", \"goals\", \"grant\", \"minus\", \"films\", \"tunes\", \"shaft\", \"firms\", \"skies\", \"bride\", \"wreck\", \"flock\", \"stare\", \"hobby\", \"bonds\", \"dared\", \"faded\", \"thief\", \"crude\", \"pants\", \"flute\", \"votes\", \"tonal\", \"radar\", \"wells\", \"skull\", \"hairs\", \"argue\", \"wears\", \"dolls\", \"voted\", \"caves\", \"cared\", \"broom\", \"scent\", \"panel\", \"fairy\", \"olive\", \"bends\", \"prism\", \"lamps\", \"cable\", \"peach\", \"ruins\", \"rally\", \"schwa\", \"lambs\", \"sells\", \"cools\", \"draft\", \"charm\", \"limbs\", \"brake\", \"gazed\", \"cubes\", \"delay\", \"beams\", \"fetch\", \"ranks\", \"array\", \"harsh\", \"camel\", \"vines\", \"picks\", \"naval\", \"purse\", \"rigid\", \"crawl\", \"toast\", \"soils\", \"sauce\", \"basin\", \"ponds\", \"twins\", \"wrist\", \"fluid\", \"pools\", \"brand\", \"stalk\", \"robot\", \"reeds\", \"hoofs\", \"buses\", \"sheer\", \"grief\", \"bloom\", \"dwelt\", \"melts\", \"risen\", \"flags\", \"knelt\", \"fiber\", \"roofs\", \"freed\", \"armor\", \"piles\", \"aimed\", \"algae\", \"twigs\", \"lemon\", \"ditch\", \"drunk\", \"rests\", \"chill\", \"slain\", \"panic\", \"cords\", \"tuned\", \"crisp\", \"ledge\", \"dived\", \"swamp\", \"clung\", \"stole\", \"molds\", \"yarns\", \"liver\", \"gauge\", \"breed\", \"stool\", \"gulls\", \"awoke\", \"gross\", \"diary\", \"rails\", \"belly\", \"trend\", \"flask\", \"stake\", \"fried\", \"draws\", \"actor\", \"handy\", \"bowls\", \"haste\", \"scope\", \"deals\", \"knots\", \"moons\", \"essay\", \"thump\", \"hangs\", \"bliss\", \"dealt\", \"gains\", \"bombs\", \"clown\", \"palms\", \"cones\", \"roast\", \"tidal\", \"bored\", \"chant\", \"acids\", \"dough\", \"camps\", \"swore\", \"lover\", \"hooks\", \"males\", \"cocoa\", \"punch\", \"award\", \"reins\", \"ninth\", \"noses\", \"links\", \"drain\", \"fills\", \"nylon\", \"lunar\", \"pulse\", \"flown\", \"elbow\", \"fatal\", \"sites\", \"moths\", \"meats\", \"foxes\", \"mined\", \"attic\", \"fiery\", \"mount\", \"usage\", \"swear\", \"snowy\", \"rusty\", \"scare\", \"traps\", \"relax\", \"react\", \"valid\", \"robin\", \"cease\", \"gills\", \"prior\", \"safer\", \"polio\", \"loyal\", \"swell\", \"salty\", \"marsh\", \"vague\", \"weave\", \"mound\", \"seals\", \"mules\", \"virus\", \"scout\", \"acute\", \"windy\", \"stout\", \"folds\", \"seize\", \"hilly\", \"joins\", \"pluck\", \"stack\", \"lords\", \"dunes\", \"burro\", \"hawks\", \"trout\", \"feeds\", \"scarf\", \"halls\", \"coals\", \"towel\", \"souls\", \"elect\", \"buggy\", \"pumps\", \"loans\", \"spins\", \"files\", \"oxide\", \"pains\", \"photo\", \"rival\", \"flats\", \"syrup\", \"rodeo\", \"sands\", \"moose\", \"pints\", \"curly\", \"comic\", \"cloak\", \"onion\", \"clams\", \"scrap\", \"didst\", \"couch\", \"codes\", \"fails\", \"ounce\", \"lodge\", \"greet\", \"gypsy\", \"utter\", \"paved\", \"zones\", \"fours\", \"alley\", \"tiles\", \"bless\", \"crest\", \"elder\", \"kills\", \"yeast\", \"erect\", \"bugle\", \"medal\", \"roles\", \"hound\", \"snail\", \"alter\", \"ankle\", \"relay\", \"loops\", \"zeros\", \"bites\", \"modes\", \"debts\", \"realm\", \"glove\", \"rayon\", \"swims\", \"poked\", \"stray\", \"lifts\", \"maker\", \"lumps\", \"graze\", \"dread\", \"barns\", \"docks\", \"masts\", \"pours\", \"wharf\", \"curse\", \"plump\", \"robes\", \"seeks\", \"cedar\", \"curls\", \"jolly\", \"myths\", \"cages\", \"gloom\", \"locks\", \"pedal\", \"beets\", \"crows\", \"anode\", \"slash\", \"creep\", \"rowed\", \"chips\", \"fists\", \"wines\", \"cares\", \"valve\", \"newer\", \"motel\", \"ivory\", \"necks\", \"clamp\", \"barge\", \"blues\", \"alien\", \"frown\", \"strap\", \"crews\", \"shack\", \"gonna\", \"saves\", \"stump\", \"ferry\", \"idols\", \"cooks\", \"juicy\", \"glare\", \"carts\", \"alloy\", \"bulbs\", \"lawns\", \"lasts\", \"fuels\", \"oddly\", \"crane\", \"filed\", \"weird\", \"shawl\", \"slips\", \"troop\", \"bolts\", \"suite\", \"sleek\", \"quilt\", \"tramp\", \"blaze\", \"atlas\", \"odors\", \"scrub\", \"crabs\", \"probe\", \"logic\", \"adobe\", \"exile\", \"rebel\", \"grind\", \"sting\", \"spine\", \"cling\", \"desks\", \"grove\", \"leaps\", \"prose\", \"lofty\", \"agony\", \"snare\", \"tusks\", \"bulls\", \"moods\", \"humid\", \"finer\", \"dimly\", \"plank\", \"china\", \"pines\", \"guilt\", \"sacks\", \"brace\", \"quote\", \"lathe\", \"gaily\", \"fonts\", \"scalp\", \"adopt\", \"foggy\", \"ferns\", \"grams\", \"clump\", \"perch\", \"tumor\", \"teens\", \"crank\", \"fable\", \"hedge\", \"genes\", \"sober\", \"boast\", \"tract\", \"cigar\", \"unite\", \"owing\", \"thigh\", \"haiku\", \"swish\", \"dikes\", \"wedge\", \"booth\", \"eased\", \"frail\", \"cough\", \"tombs\", \"darts\", \"forts\", \"choir\", \"pouch\", \"pinch\", \"hairy\", \"buyer\", \"torch\", \"vigor\", \"waltz\", \"heats\", \"herbs\", \"users\", \"flint\", \"click\", \"madam\", \"bleak\", \"blunt\", \"aided\", \"lacks\", \"masks\", \"waded\", \"risks\", \"nurse\", \"chaos\", \"sewed\", \"cured\", \"ample\", \"lease\", \"steak\", \"sinks\", \"merit\", \"bluff\", \"bathe\", \"gleam\", \"bonus\", \"colts\", \"shear\", \"gland\", \"silky\", \"skate\", \"birch\", \"anvil\", \"sleds\", \"groan\", \"maids\", \"meets\", \"speck\", \"hymns\", \"hints\", \"drown\", \"bosom\", \"slick\", \"quest\", \"coils\", \"spied\", \"snows\", \"stead\", \"snack\", \"plows\", \"blond\", \"tamed\", \"thorn\", \"waits\", \"glued\", \"banjo\", \"tease\", \"arena\", \"bulky\", \"carve\", \"stunt\", \"warms\", \"shady\", \"razor\", \"folly\", \"leafy\", \"notch\", \"fools\", \"otter\", \"pears\", \"flush\", \"genus\", \"ached\", \"fives\", \"flaps\", \"spout\", \"smote\", \"fumes\", \"adapt\", \"cuffs\", \"tasty\", \"stoop\", \"clips\", \"disks\", \"sniff\", \"lanes\", \"brisk\", \"imply\", \"demon\", \"super\", \"furry\", \"raged\", \"growl\", \"texts\", \"hardy\", \"stung\", \"typed\", \"hates\", \"wiser\", \"timid\", \"serum\", \"beaks\", \"rotor\", \"casts\", \"baths\", \"glide\", \"plots\", \"trait\", \"resin\", \"slums\", \"lyric\", \"puffs\", \"decks\", \"brood\", \"mourn\", \"aloft\", \"abuse\", \"whirl\", \"edged\", \"ovary\", \"quack\", \"heaps\", \"slang\", \"await\", \"civic\", \"saint\", \"bevel\", \"sonar\", \"aunts\", \"packs\", \"froze\", \"tonic\", \"corps\", \"swarm\", \"frank\", \"repay\", \"gaunt\", \"wired\", \"niece\", \"cello\", \"needy\", \"chuck\", \"stony\", \"media\", \"surge\", \"hurts\", \"repel\", \"husky\", \"dated\", \"hunts\", \"mists\", \"exert\", \"dries\", \"mates\", \"sworn\", \"baker\", \"spice\", \"oasis\", \"boils\", \"spurs\", \"doves\", \"sneak\", \"paces\", \"colon\", \"siege\", \"strum\", \"drier\", \"cacao\", \"humus\", \"bales\", \"piped\", \"nasty\", \"rinse\", \"boxer\", \"shrub\", \"amuse\", \"tacks\", \"cited\", \"slung\", \"delta\", \"laden\", \"larva\", \"rents\", \"yells\", \"spool\", \"spill\", \"crush\", \"jewel\", \"snaps\", \"stain\", \"kicks\", \"tying\", \"slits\", \"rated\", \"eerie\", \"smash\", \"plums\", \"zebra\", \"earns\", \"bushy\", \"scary\", \"squad\", \"tutor\", \"silks\", \"slabs\", \"bumps\", \"evils\", \"fangs\", \"snout\", \"peril\", \"pivot\", \"yacht\", \"lobby\", \"jeans\", \"grins\", \"viola\", \"liner\", \"comet\", \"scars\", \"chops\", \"raids\", \"eater\", \"slate\", \"skips\", \"soles\", \"misty\", \"urine\", \"knobs\", \"sleet\", \"holly\", \"pests\", \"forks\", \"grill\", \"trays\", \"pails\", \"borne\", \"tenor\", \"wares\", \"carol\", \"woody\", \"canon\", \"wakes\", \"kitty\", \"miner\", \"polls\", \"shaky\", \"nasal\", \"scorn\", \"chess\", \"taxis\", \"crate\", \"shyly\", \"tulip\", \"forge\", \"nymph\", \"budge\", \"lowly\", \"abide\", \"depot\", \"oases\", \"asses\", \"sheds\", \"fudge\", \"pills\", \"rivet\", \"thine\", \"groom\", \"lanky\", \"boost\", \"broth\", \"heave\", \"gravy\", \"beech\", \"timed\", \"quail\", \"inert\", \"gears\", \"chick\", \"hinge\", \"trash\", \"clash\", \"sighs\", \"renew\", \"bough\", \"dwarf\", \"slows\", \"quill\", \"shave\", \"spore\", \"sixes\", \"chunk\", \"madly\", \"paced\", \"braid\", \"fuzzy\", \"motto\", \"spies\", \"slack\", \"mucus\", \"magma\", \"awful\", \"discs\", \"erase\", \"posed\", \"asset\", \"cider\", \"taper\", \"theft\", \"churn\", \"satin\", \"slots\", \"taxed\", \"bully\", \"sloth\", \"shale\", \"tread\", \"raked\", \"curds\", \"manor\", \"aisle\", \"bulge\", \"loins\", \"stair\", \"tapes\", \"leans\", \"bunks\", \"squat\", \"towed\", \"lance\", \"panes\", \"sakes\", \"heirs\", \"caste\", \"dummy\", \"pores\", \"fauna\", \"crook\", \"poise\", \"epoch\", \"risky\", \"warns\", \"fling\", \"berry\", \"grape\", \"flank\", \"drags\", \"squid\", \"pelts\", \"icing\", \"irony\", \"irons\", \"barks\", \"whoop\", \"choke\", \"diets\", \"whips\", \"tally\", \"dozed\", \"twine\", \"kites\", \"bikes\", \"ticks\", \"riots\", \"roars\", \"vault\", \"looms\", \"scold\", \"blink\", \"dandy\", \"pupae\", \"sieve\", \"spike\", \"ducts\", \"lends\", \"pizza\", \"brink\", \"widen\", \"plumb\", \"pagan\", \"feats\", \"bison\", \"soggy\", \"scoop\", \"argon\", \"nudge\", \"skiff\", \"amber\", \"sexes\", \"rouse\", \"salts\", \"hitch\", \"exalt\", \"leash\", \"dined\", \"chute\", \"snort\", \"gusts\", \"melon\", \"cheat\", \"reefs\", \"llama\", \"lasso\", \"debut\", \"quota\", \"oaths\", \"prone\", \"mixes\", \"rafts\", \"dives\", \"stale\", \"inlet\", \"flick\", \"pinto\", \"brows\", \"untie\", \"batch\", \"greed\", \"chore\", \"stirs\", \"blush\", \"onset\", \"barbs\", \"volts\", \"beige\", \"swoop\", \"paddy\", \"laced\", \"shove\", \"jerky\", \"poppy\", \"leaks\", \"fares\", \"dodge\", \"godly\", \"squaw\", \"affix\", \"brute\", \"nicer\", \"undue\", \"snarl\", \"merge\", \"doses\", \"showy\", \"daddy\", \"roost\", \"vases\", \"swirl\", \"petty\", \"colds\", \"curry\", \"cobra\", \"genie\", \"flare\", \"messy\", \"cores\", \"soaks\", \"ripen\", \"whine\", \"amino\", \"plaid\", \"spiny\", \"mowed\", \"baton\", \"peers\", \"vowed\", \"pious\", \"swans\", \"exits\", \"afoot\", \"plugs\", \"idiom\", \"chili\", \"rites\", \"serfs\", \"cleft\", \"berth\", \"grubs\", \"annex\", \"dizzy\", \"hasty\", \"latch\", \"wasps\", \"mirth\", \"baron\", \"plead\", \"aloof\", \"aging\", \"pixel\", \"bared\", \"mummy\", \"hotly\", \"auger\", \"buddy\", \"chaps\", \"badge\", \"stark\", \"fairs\", \"gully\", \"mumps\", \"emery\", \"filly\", \"ovens\", \"drone\", \"gauze\", \"idiot\", \"fussy\", \"annoy\", \"shank\", \"gouge\", \"bleed\", \"elves\", \"roped\", \"unfit\", \"baggy\", \"mower\", \"scant\", \"grabs\", \"fleas\", \"lousy\", \"album\", \"sawed\", \"cooky\", \"murky\", \"infer\", \"burly\", \"waged\", \"dingy\", \"brine\", \"kneel\", \"creak\", \"vanes\", \"smoky\", \"spurt\", \"combs\", \"easel\", \"laces\", \"humps\", \"rumor\", \"aroma\", \"horde\", \"swiss\", \"leapt\", \"opium\", \"slime\", \"afire\", \"pansy\", \"mares\", \"soaps\", \"husks\", \"snips\", \"hazel\", \"lined\", \"cafes\", \"naive\", \"wraps\", \"sized\", \"piers\", \"beset\", \"agile\", \"tongs\", \"steed\", \"fraud\", \"booty\", \"valor\", \"downy\", \"witty\", \"mossy\", \"psalm\", \"scuba\", \"tours\", \"polka\", \"milky\", \"gaudy\", \"shrug\", \"tufts\", \"wilds\", \"laser\", \"truss\", \"hares\", \"creed\", \"lilac\", \"siren\", \"tarry\", \"bribe\", \"swine\", \"muted\", \"flips\", \"cures\", \"sinew\", \"boxed\", \"hoops\", \"gasps\", \"hoods\", \"niche\", \"yucca\", \"glows\", \"sewer\", \"whack\", \"fuses\", \"gowns\", \"droop\", \"bucks\", \"pangs\", \"mails\", \"whisk\", \"haven\", \"clasp\", \"sling\", \"stint\", \"urges\", \"champ\", \"piety\", \"chirp\", \"pleat\", \"posse\", \"sunup\", \"menus\", \"howls\", \"quake\", \"knack\", \"plaza\", \"fiend\", \"caked\", \"bangs\", \"erupt\", \"poker\", \"olden\", \"cramp\", \"voter\", \"poses\", \"manly\", \"slump\", \"fined\", \"grips\", \"gaped\", \"purge\", \"hiked\", \"maize\", \"fluff\", \"strut\", \"sloop\", \"prowl\", \"roach\", \"cocks\", \"bland\", \"dials\", \"plume\", \"slaps\", \"soups\", \"dully\", \"wills\", \"foams\", \"solos\", \"skier\", \"eaves\", \"totem\", \"fused\", \"latex\", \"veils\", \"mused\", \"mains\", \"myrrh\", \"racks\", \"galls\", \"gnats\", \"bouts\", \"sisal\", \"shuts\", \"hoses\", \"dryly\", \"hover\", \"gloss\", \"seeps\", \"denim\", \"putty\", \"guppy\", \"leaky\", \"dusky\", \"filth\", \"oboes\", \"spans\", \"fowls\", \"adorn\", \"glaze\", \"haunt\", \"dares\", \"obeys\", \"bakes\", \"abyss\", \"smelt\", \"gangs\", \"aches\", \"trawl\", \"claps\", \"undid\", \"spicy\", \"hoist\", \"fades\", \"vicar\", \"acorn\", \"pussy\", \"gruff\", \"musty\", \"tarts\", \"snuff\", \"hunch\", \"truce\", \"tweed\", \"dryer\", \"loser\", \"sheaf\", \"moles\", \"lapse\", \"tawny\", \"vexed\", \"autos\", \"wager\", \"domes\", \"sheen\", \"clang\", \"spade\", \"sowed\", \"broil\", \"slyly\", \"studs\", \"grunt\", \"donor\", \"slugs\", \"aspen\", \"homer\", \"croak\", \"tithe\", \"halts\", \"avert\", \"havoc\", \"hogan\", \"glint\", \"ruddy\", \"jeeps\", \"flaky\", \"ladle\", \"taunt\", \"snore\", \"fines\", \"props\", \"prune\", \"pesos\", \"radii\", \"pokes\", \"tiled\", \"daisy\", \"heron\", \"villa\", \"farce\", \"binds\", \"cites\", \"fixes\", \"jerks\", \"livid\", \"waked\", \"inked\", \"booms\", \"chews\", \"licks\", \"hyena\", \"scoff\", \"lusty\", \"sonic\", \"smith\", \"usher\", \"tucks\", \"vigil\", \"molts\", \"sects\", \"spars\", \"dumps\", \"scaly\", \"wisps\", \"sores\", \"mince\", \"panda\", \"flier\", \"axles\", \"plied\", \"booby\", \"patio\", \"rabbi\", \"petal\", \"polyp\", \"tints\", \"grate\", \"troll\", \"tolls\", \"relic\", \"phony\", \"bleat\", \"flaws\", \"flake\", \"snags\", \"aptly\", \"drawl\", \"ulcer\", \"soapy\", \"bossy\", \"monks\", \"crags\", \"caged\", \"twang\", \"diner\", \"taped\", \"cadet\", \"grids\", \"spawn\", \"guile\", \"noose\", \"mores\", \"girth\", \"slimy\", \"aides\", \"spasm\", \"burrs\", \"alibi\", \"lymph\", \"saucy\", \"muggy\", \"liter\", \"joked\", \"goofy\", \"exams\", \"enact\", \"stork\", \"lured\", \"toxic\", \"omens\", \"nears\", \"covet\", \"wrung\", \"forum\", \"venom\", \"moody\", \"alder\", \"sassy\", \"flair\", \"guild\", \"prays\", \"wrens\", \"hauls\", \"stave\", \"tilts\", \"pecks\", \"stomp\", \"gales\", \"tempt\", \"capes\", \"mesas\", \"omits\", \"tepee\", \"harry\", \"wring\", \"evoke\", \"limes\", \"cluck\", \"lunge\", \"highs\", \"canes\", \"giddy\", \"lithe\", \"verge\", \"khaki\", \"queue\", \"loath\", \"foyer\", \"outdo\", \"fared\", \"deter\", \"crumb\", \"astir\", \"spire\", \"jumpy\", \"extol\", \"buoys\", \"stubs\", \"lucid\", \"thong\", \"afore\", \"whiff\", \"maxim\", \"hulls\", \"clogs\", \"slats\", \"jiffy\", \"arbor\", \"cinch\", \"igloo\", \"goody\", \"gazes\", \"dowel\", \"calms\", \"bitch\", \"scowl\", \"gulps\", \"coded\", \"waver\", \"mason\", \"lobes\", \"ebony\", \"flail\", \"isles\", \"clods\", \"dazed\", \"adept\", \"oozed\", \"sedan\", \"clays\", \"warts\", \"ketch\", \"skunk\", \"manes\", \"adore\", \"sneer\", \"mango\", \"fiord\", \"flora\", \"roomy\", \"minks\", \"thaws\", \"watts\", \"freer\", \"exult\", \"plush\", \"paled\", \"twain\", \"clink\", \"scamp\", \"pawed\", \"grope\", \"bravo\", \"gable\", \"stink\", \"sever\", \"waned\", \"rarer\", \"regal\", \"wards\", \"fawns\", \"babes\", \"unify\", \"amend\", \"oaken\", \"glade\", \"visor\", \"hefty\", \"nines\", \"throb\", \"pecan\", \"butts\", \"pence\", \"sills\", \"jails\", \"flyer\", \"saber\", \"nomad\", \"miter\", \"beeps\", \"domed\", \"gulfs\", \"curbs\", \"heath\", \"moors\", \"aorta\", \"larks\", \"tangy\", \"wryly\", \"cheep\", \"rages\", \"evade\", \"lures\", \"freak\", \"vogue\", \"tunic\", \"slams\", \"knits\", \"dumpy\", \"mania\", \"spits\", \"firth\", \"hikes\", \"trots\", \"nosed\", \"clank\", \"dogma\", \"bloat\", \"balsa\", \"graft\", \"middy\", \"stile\", \"keyed\", \"finch\", \"sperm\", \"chaff\", \"wiles\", \"amigo\", \"copra\", \"amiss\", \"eying\", \"twirl\", \"lurch\", \"popes\", \"chins\", \"smock\", \"tines\", \"guise\", \"grits\", \"junks\", \"shoal\", \"cache\", \"tapir\", \"atoll\", \"deity\", \"toils\", \"spree\", \"mocks\", \"scans\", \"shorn\", \"revel\", \"raven\", \"hoary\", \"reels\", \"scuff\", \"mimic\", \"weedy\", \"corny\", \"truer\", \"rouge\", \"ember\", \"floes\", \"torso\", \"wipes\", \"edict\", \"sulky\", \"recur\", \"groin\", \"baste\", \"kinks\", \"surer\", \"piggy\", \"moldy\", \"franc\", \"liars\", \"inept\", \"gusty\", \"facet\", \"jetty\", \"equip\", \"leper\", \"slink\", \"soars\", \"cater\", \"dowry\", \"sided\", \"yearn\", \"decoy\", \"taboo\", \"ovals\", \"heals\", \"pleas\", \"beret\", \"spilt\", \"gayly\", \"rover\", \"endow\", \"pygmy\", \"carat\", \"abbey\", \"vents\", \"waken\", \"chimp\", \"fumed\", \"sodas\", \"vinyl\", \"clout\", \"wades\", \"mites\", \"smirk\", \"bores\", \"bunny\", \"surly\", \"frock\", \"foray\", \"purer\", \"milks\", \"query\", \"mired\", \"blare\", \"froth\", \"gruel\", \"navel\", \"paler\", \"puffy\", \"casks\", \"grime\", \"derby\", \"mamma\", \"gavel\", \"teddy\", \"vomit\", \"moans\", \"allot\", \"defer\", \"wield\", \"viper\", \"louse\", \"erred\", \"hewed\", \"abhor\", \"wrest\", \"waxen\", \"adage\", \"ardor\", \"stabs\", \"pored\", \"rondo\", \"loped\", \"fishy\", \"bible\", \"hires\", \"foals\", \"feuds\", \"jambs\", \"thuds\", \"jeers\", \"knead\", \"quirk\", \"rugby\", \"expel\", \"greys\", \"rigor\", \"ester\", \"lyres\", \"aback\", \"glues\", \"lotus\", \"lurid\", \"rungs\", \"hutch\", \"thyme\", \"valet\", \"tommy\", \"yokes\", \"epics\", \"trill\", \"pikes\", \"ozone\", \"caper\", \"chime\", \"frees\", \"famed\", \"leech\", \"smite\", \"neigh\", \"erode\", \"robed\", \"hoard\", \"salve\", \"conic\", \"gawky\", \"craze\", \"jacks\", \"gloat\", \"mushy\", \"rumps\", \"fetus\", \"wince\", \"pinks\", \"shalt\", \"toots\", \"glens\", \"cooed\", \"rusts\", \"stews\", \"shred\", \"parka\", \"chugs\", \"winks\", \"clots\", \"shrew\", \"booed\", \"filmy\", \"juror\", \"dents\", \"gummy\", \"grays\", \"hooky\", \"butte\", \"dogie\", \"poled\", \"reams\", \"fifes\", \"spank\", \"gayer\", \"tepid\", \"spook\", \"taint\", \"flirt\", \"rogue\", \"spiky\", \"opals\", \"miser\", \"cocky\", \"coyly\", \"balmy\", \"slosh\", \"brawl\", \"aphid\", \"faked\", \"hydra\", \"brags\", \"chide\", \"yanks\", \"allay\", \"video\", \"altos\", \"eases\", \"meted\", \"chasm\", \"longs\", \"excel\", \"taffy\", \"impel\", \"savor\", \"koala\", \"quays\", \"dawns\", \"proxy\", \"clove\", \"duets\", \"dregs\", \"tardy\", \"briar\", \"grimy\", \"ultra\", \"meaty\", \"halve\", \"wails\", \"suede\", \"mauve\", \"envoy\", \"arson\", \"coves\", \"gooey\", \"brews\", \"sofas\", \"chums\", \"amaze\", \"zooms\", \"abbot\", \"halos\", \"scour\", \"suing\", \"cribs\", \"sagas\", \"enema\", \"wordy\", \"harps\", \"coupe\", \"molar\", \"flops\", \"weeps\", \"mints\", \"ashen\", \"felts\", \"askew\", \"munch\", \"mewed\", \"divan\", \"vices\", \"jumbo\", \"blobs\", \"blots\", \"spunk\", \"acrid\", \"topaz\", \"cubed\", \"clans\", \"flees\", \"slurs\", \"gnaws\", \"welds\", \"fords\", \"emits\", \"agate\", \"pumas\", \"mends\", \"darks\", \"dukes\", \"plies\", \"canny\", \"hoots\", \"oozes\", \"lamed\", \"fouls\", \"clefs\", \"nicks\", \"mated\", \"skims\", \"brunt\", \"tuber\", \"tinge\", \"fates\", \"ditty\", \"thins\", \"frets\", \"eider\", \"bayou\", \"mulch\", \"fasts\", \"amass\", \"damps\", \"morns\", \"friar\", \"palsy\", \"vista\", \"croon\", \"conch\", \"udder\", \"tacos\", \"skits\", \"mikes\", \"quits\", \"preen\", \"aster\", \"adder\", \"elegy\", \"pulpy\", \"scows\", \"baled\", \"hovel\", \"lavas\", \"crave\", \"optic\", \"welts\", \"busts\", \"knave\", \"razed\", \"shins\", \"totes\", \"scoot\", \"dears\", \"crock\", \"mutes\", \"trims\", \"skein\", \"doted\", \"shuns\", \"veers\", \"fakes\", \"yoked\", \"wooed\", \"hacks\", \"sprig\", \"wands\", \"lulls\", \"seers\", \"snobs\", \"nooks\", \"pined\", \"perky\", \"mooed\", \"frill\", \"dines\", \"booze\", \"tripe\", \"prong\", \"drips\", \"odder\", \"levee\", \"antic\", \"sidle\", \"pithy\", \"corks\", \"yelps\", \"joker\", \"fleck\", \"buffs\", \"scram\", \"tiers\", \"bogey\", \"doled\", \"irate\", \"vales\", \"coped\", \"hails\", \"elude\", \"bulks\", \"aired\", \"vying\", \"stags\", \"strew\", \"cocci\", \"pacts\", \"scabs\", \"silos\", \"dusts\", \"yodel\", \"terse\", \"jaded\", \"baser\", \"jibes\", \"foils\", \"sways\", \"forgo\", \"slays\", \"preys\", \"treks\", \"quell\", \"peeks\", \"assay\", \"lurks\", \"eject\", \"boars\", \"trite\", \"belch\", \"gnash\", \"wanes\", \"lutes\", \"whims\", \"dosed\", \"chewy\", \"snipe\", \"umbra\", \"teems\", \"dozes\", \"kelps\", \"upped\", \"brawn\", \"doped\", \"shush\", \"rinds\", \"slush\", \"moron\", \"voile\", \"woken\", \"fjord\", \"sheik\", \"jests\", \"kayak\", \"slews\", \"toted\", \"saner\", \"drape\", \"patty\", \"raves\", \"sulfa\", \"grist\", \"skied\", \"vixen\", \"civet\", \"vouch\", \"tiara\", \"homey\", \"moped\", \"runts\", \"serge\", \"kinky\", \"rills\", \"corns\", \"brats\", \"pries\", \"amble\", \"fries\", \"loons\", \"tsars\", \"datum\", \"musky\", \"pigmy\", \"gnome\", \"ravel\", \"ovule\", \"icily\", \"liken\", \"lemur\", \"frays\", \"silts\", \"sifts\", \"plods\", \"ramps\", \"tress\", \"earls\", \"dudes\", \"waive\", \"karat\", \"jolts\", \"peons\", \"beers\", \"horny\", \"pales\", \"wreak\", \"lairs\", \"lynch\", \"stank\", \"swoon\", \"idler\", \"abort\", \"blitz\", \"ensue\", \"atone\", \"bingo\", \"roves\", \"kilts\", \"scald\", \"adios\", \"cynic\", \"dulls\", \"memos\", \"elfin\", \"dales\", \"peels\", \"peals\", \"bares\", \"sinus\", \"crone\", \"sable\", \"hinds\", \"shirk\", \"enrol\", \"wilts\", \"roams\", \"duped\", \"cysts\", \"mitts\", \"safes\", \"spats\", \"coops\", \"filet\", \"knell\", \"refit\", \"covey\", \"punks\", \"kilns\", \"fitly\", \"abate\", \"talcs\", \"heeds\", \"duels\", \"wanly\", \"ruffs\", \"gauss\", \"lapel\", \"jaunt\", \"whelp\", \"cleat\", \"gauzy\", \"dirge\", \"edits\", \"wormy\", \"moats\", \"smear\", \"prods\", \"bowel\", \"frisk\", \"vests\", \"bayed\", \"rasps\", \"tames\", \"delve\", \"embed\", \"befit\", \"wafer\", \"ceded\", \"novas\", \"feign\", \"spews\", \"larch\", \"huffs\", \"doles\", \"mamas\", \"hulks\", \"pried\", \"brims\", \"irked\", \"aspic\", \"swipe\", \"mealy\", \"skimp\", \"bluer\", \"slake\", \"dowdy\", \"penis\", \"brays\", \"pupas\", \"egret\", \"flunk\", \"phlox\", \"gripe\", \"peony\", \"douse\", \"blurs\", \"darns\", \"slunk\", \"lefts\", \"chats\", \"inane\", \"vials\", \"stilt\", \"rinks\", \"woofs\", \"wowed\", \"bongs\", \"frond\", \"ingot\", \"evict\", \"singe\", \"shyer\", \"flied\", \"slops\", \"dolts\", \"drool\", \"dells\", \"whelk\", \"hippy\", \"feted\", \"ether\", \"cocos\", \"hives\", \"jibed\", \"mazes\", \"trios\", \"sirup\", \"squab\", \"laths\", \"leers\", \"pasta\", \"rifts\", \"lopes\", \"alias\", \"whirs\", \"diced\", \"slags\", \"lodes\", \"foxed\", \"idled\", \"prows\", \"plait\", \"malts\", \"chafe\", \"cower\", \"toyed\", \"chefs\", \"keels\", \"sties\", \"racer\", \"etude\", \"sucks\", \"sulks\", \"micas\", \"czars\", \"copse\", \"ailed\", \"abler\", \"rabid\", \"golds\", \"croup\", \"snaky\", \"visas\", \"palls\", \"mopes\", \"boned\", \"wispy\", \"raved\", \"swaps\", \"junky\", \"doily\", \"pawns\", \"tamer\", \"poach\", \"baits\", \"damns\", \"gumbo\", \"daunt\", \"prank\", \"hunks\", \"buxom\", \"heres\", \"honks\", \"stows\", \"unbar\", \"idles\", \"routs\", \"sages\", \"goads\", \"remit\", \"copes\", \"deign\", \"culls\", \"girds\", \"haves\", \"lucks\", \"stunk\", \"dodos\", \"shams\", \"snubs\", \"icons\", \"usurp\", \"dooms\", \"hells\", \"soled\", \"comas\", \"paves\", \"maths\", \"perks\", \"limps\", \"wombs\", \"blurb\", \"daubs\", \"cokes\", \"sours\", \"stuns\", \"cased\", \"musts\", \"coeds\", \"cowed\", \"aping\", \"zoned\", \"rummy\", \"fetes\", \"skulk\", \"quaff\", \"rajah\", \"deans\", \"reaps\", \"galas\", \"tills\", \"roved\", \"kudos\", \"toned\", \"pared\", \"scull\", \"vexes\", \"punts\", \"snoop\", \"bails\", \"dames\", \"hazes\", \"lores\", \"marts\", \"voids\", \"ameba\", \"rakes\", \"adzes\", \"harms\", \"rears\", \"satyr\", \"swill\", \"hexes\", \"colic\", \"leeks\", \"hurls\", \"yowls\", \"ivies\", \"plops\", \"musks\", \"papaw\", \"jells\", \"bused\", \"cruet\", \"bided\", \"filch\", \"zests\", \"rooks\", \"laxly\", \"rends\", \"loams\", \"basks\", \"sires\", \"carps\", \"pokey\", \"flits\", \"muses\", \"bawls\", \"shuck\", \"viler\", \"lisps\", \"peeps\", \"sorer\", \"lolls\", \"prude\", \"diked\", \"floss\", \"flogs\", \"scums\", \"dopes\", \"bogie\", \"pinky\", \"leafs\", \"tubas\", \"scads\", \"lowed\", \"yeses\", \"biked\", \"qualm\", \"evens\", \"caned\", \"gawks\", \"whits\", \"wooly\", \"gluts\", \"romps\", \"bests\", \"dunce\", \"crony\", \"joist\", \"tunas\", \"boner\", \"malls\", \"parch\", \"avers\", \"crams\", \"pares\", \"dally\", \"bigot\", \"kales\", \"flays\", \"leach\", \"gushy\", \"pooch\", \"huger\", \"slyer\", \"golfs\", \"mires\", \"flues\", \"loafs\", \"arced\", \"acnes\", \"neons\", \"fiefs\", \"dints\", \"dazes\", \"pouts\", \"cored\", \"yules\", \"lilts\", \"beefs\", \"mutts\", \"fells\", \"cowls\", \"spuds\", \"lames\", \"jawed\", \"dupes\", \"deads\", \"bylaw\", \"noons\", \"nifty\", \"clued\", \"vireo\", \"gapes\", \"metes\", \"cuter\", \"maims\", \"droll\", \"cupid\", \"mauls\", \"sedge\", \"papas\", \"wheys\", \"eking\", \"loots\", \"hilts\", \"meows\", \"beaus\", \"dices\", \"peppy\", \"riper\", \"fogey\", \"gists\", \"yogas\", \"gilts\", \"skews\", \"cedes\", \"zeals\", \"alums\", \"okays\", \"elope\", \"grump\", \"wafts\", \"soots\", \"blimp\", \"hefts\", \"mulls\", \"hosed\", \"cress\", \"doffs\", \"ruder\", \"pixie\", \"waifs\", \"ousts\", \"pucks\", \"biers\", \"gulch\", \"suets\", \"hobos\", \"lints\", \"brans\", \"teals\", \"garbs\", \"pewee\", \"helms\", \"turfs\", \"quips\", \"wends\", \"banes\", \"napes\", \"icier\", \"swats\", \"bagel\", \"hexed\", \"ogres\", \"goner\", \"gilds\", \"pyres\", \"lards\", \"bides\", \"paged\", \"talon\", \"flout\", \"medic\", \"veals\", \"putts\", \"dirks\", \"dotes\", \"tippy\", \"blurt\", \"piths\", \"acing\", \"barer\", \"whets\", \"gaits\", \"wools\", \"dunks\", \"heros\", \"swabs\", \"dirts\", \"jutes\", \"hemps\", \"surfs\", \"okapi\", \"chows\", \"shoos\", \"dusks\", \"parry\", \"decal\", \"furls\", \"cilia\", \"sears\", \"novae\", \"murks\", \"warps\", \"slues\", \"lamer\", \"saris\", \"weans\", \"purrs\", \"dills\", \"togas\", \"newts\", \"meany\", \"bunts\", \"razes\", \"goons\", \"wicks\", \"ruses\", \"vends\", \"geode\", \"drake\", \"judos\", \"lofts\", \"pulps\", \"lauds\", \"mucks\", \"vises\", \"mocha\", \"oiled\", \"roman\", \"ethyl\", \"gotta\", \"fugue\", \"smack\", \"gourd\", \"bumpy\", \"radix\", \"fatty\", \"borax\", \"cubit\", \"cacti\", \"gamma\", \"focal\", \"avail\", \"papal\", \"golly\", \"elite\", \"versa\", \"billy\", \"adieu\", \"annum\", \"howdy\", \"rhino\", \"norms\", \"bobby\", \"axiom\", \"setup\", \"yolks\", \"terns\", \"mixer\", \"genre\", \"knoll\", \"abode\", \"junta\", \"gorge\", \"combo\", \"alpha\", \"overt\", \"kinda\", \"spelt\", \"prick\", \"nobly\", \"ephod\", \"audio\", \"modal\", \"veldt\", \"warty\", \"fluke\", \"bonny\", \"bream\", \"rosin\", \"bolls\", \"doers\", \"downs\", \"beady\", \"motif\", \"humph\", \"fella\", \"mould\", \"crepe\", \"kerns\", \"aloha\", \"glyph\", \"azure\", \"riser\", \"blest\", \"locus\", \"lumpy\", \"beryl\", \"wanna\", \"brier\", \"tuner\", \"rowdy\", \"mural\", \"timer\", \"canst\", \"krill\", \"quoth\", \"lemme\", \"triad\", \"tenon\", \"amply\", \"deeps\", \"padre\", \"leant\", \"pacer\", \"octal\", \"dolly\", \"trans\", \"sumac\", \"foamy\", \"lolly\", \"giver\", \"quipu\", \"codex\", \"manna\", \"unwed\", \"vodka\", \"ferny\", \"salon\", \"duple\", \"boron\", \"revue\", \"crier\", \"alack\", \"inter\", \"dilly\", \"whist\", \"cults\", \"spake\", \"reset\", \"loess\", \"decor\", \"mover\", \"verve\", \"ethic\", \"gamut\", \"lingo\", \"dunno\", \"align\", \"sissy\", \"incur\", \"reedy\", \"avant\", \"piper\", \"waxer\", \"calyx\", \"basil\", \"coons\", \"seine\", \"piney\", \"lemma\", \"trams\", \"winch\", \"whirr\", \"saith\", \"ionic\", \"heady\", \"harem\", \"tummy\", \"sally\", \"shied\", \"dross\", \"farad\", \"saver\", \"tilde\", \"jingo\", \"bower\", \"serif\", \"facto\", \"belle\", \"inset\", \"bogus\", \"caved\", \"forte\", \"sooty\", \"bongo\", \"toves\", \"credo\", \"basal\", \"yella\", \"aglow\", \"glean\", \"gusto\", \"hymen\", \"ethos\", \"terra\", \"brash\", \"scrip\", \"swash\", \"aleph\", \"tinny\", \"itchy\", \"wanta\", \"trice\", \"jowls\", \"gongs\", \"garde\", \"boric\", \"twill\", \"sower\", \"henry\", \"awash\", \"libel\", \"spurn\", \"sabre\", \"rebut\", \"penal\", \"obese\", \"sonny\", \"quirt\", \"mebbe\", \"tacit\", \"greek\", \"xenon\", \"hullo\", \"pique\", \"roger\", \"negro\", \"hadst\", \"gecko\", \"beget\", \"uncut\", \"aloes\", \"louis\", \"quint\", \"clunk\", \"raped\", \"salvo\", \"diode\", \"matey\", \"hertz\", \"xylem\", \"kiosk\", \"apace\", \"cawed\", \"peter\", \"wench\", \"cohos\", \"sorta\", \"gamba\", \"bytes\", \"tango\", \"nutty\", \"axial\", \"aleck\", \"natal\", \"clomp\", \"gored\", \"siree\", \"bandy\", \"gunny\", \"runic\", \"whizz\", \"rupee\", \"fated\", \"wiper\", \"bards\", \"briny\", \"staid\", \"hocks\", \"ochre\", \"yummy\", \"gents\", \"soupy\", \"roper\", \"swath\", \"cameo\", \"edger\", \"spate\", \"gimme\", \"ebbed\", \"breve\", \"theta\", \"deems\", \"dykes\", \"servo\", \"telly\", \"tabby\", \"tares\", \"blocs\", \"welch\", \"ghoul\", \"vitae\", \"cumin\", \"dinky\", \"bronc\", \"tabor\", \"teeny\", \"comer\", \"borer\", \"sired\", \"privy\", \"mammy\", \"deary\", \"gyros\", \"sprit\", \"conga\", \"quire\", \"thugs\", \"furor\", \"bloke\", \"runes\", \"bawdy\", \"cadre\", \"toxin\", \"annul\", \"egged\", \"anion\", \"nodes\", \"picky\", \"stein\", \"jello\", \"audit\", \"echos\", \"fagot\", \"letup\", \"eyrie\", \"fount\", \"caped\", \"axons\", \"amuck\", \"banal\", \"riled\", \"petit\", \"umber\", \"miler\", \"fibre\", \"agave\", \"bated\", \"bilge\", \"vitro\", \"feint\", \"pudgy\", \"mater\", \"manic\", \"umped\", \"pesky\", \"strep\", \"slurp\", \"pylon\", \"puree\", \"caret\", \"temps\", \"newel\", \"yawns\", \"seedy\", \"treed\", \"coups\", \"rangy\", \"brads\", \"mangy\", \"loner\", \"circa\", \"tibia\", \"afoul\", \"mommy\", \"titer\", \"carne\", \"kooky\", \"motes\", \"amity\", \"suave\", \"hippo\", \"curvy\", \"samba\", \"newsy\", \"anise\", \"imams\", \"tulle\", \"aways\", \"liven\", \"hallo\", \"wales\", \"opted\", \"canto\", \"idyll\", \"bodes\", \"curio\", \"wrack\", \"hiker\", \"chive\", \"yokel\", \"dotty\", \"demur\", \"cusps\", \"specs\", \"quads\", \"laity\", \"toner\", \"decry\", \"writs\", \"saute\", \"clack\", \"aught\", \"logos\", \"tipsy\", \"natty\", \"ducal\", \"bidet\", \"bulgy\", \"metre\", \"lusts\", \"unary\", \"goeth\", \"baler\", \"sited\", \"shies\", \"hasps\", \"brung\", \"holed\", \"swank\", \"looky\", \"melee\", \"huffy\", \"loamy\", \"pimps\", \"titan\", \"binge\", \"shunt\", \"femur\", \"libra\", \"seder\", \"honed\", \"annas\", \"coypu\", \"shims\", \"zowie\", \"jihad\", \"savvy\", \"nadir\", \"basso\", \"monic\", \"maned\", \"mousy\", \"omega\", \"laver\", \"prima\", \"picas\", \"folio\", \"mecca\", \"reals\", \"troth\", \"testy\", \"balky\", \"crimp\", \"chink\", \"abets\", \"splat\", \"abaci\", \"vaunt\", \"cutie\", \"pasty\", \"moray\", \"levis\", \"ratty\", \"islet\", \"joust\", \"motet\", \"viral\", \"nukes\", \"grads\", \"comfy\", \"voila\", \"woozy\", \"blued\", \"whomp\", \"sward\", \"metro\", \"skeet\", \"chine\", \"aerie\", \"bowie\", \"tubby\", \"emirs\", \"coati\", \"unzip\", \"slobs\", \"trike\", \"funky\", \"ducat\", \"dewey\", \"skoal\", \"wadis\", \"oomph\", \"taker\", \"minim\", \"getup\", \"stoic\", \"synod\", \"runty\", \"flyby\", \"braze\", \"inlay\", \"venue\", \"louts\", \"peaty\", \"orlon\", \"humpy\", \"radon\", \"beaut\", \"raspy\", \"unfed\", \"crick\", \"nappy\", \"vizor\", \"yipes\", \"rebus\", \"divot\", \"kiwis\", \"vetch\", \"squib\", \"sitar\", \"kiddo\", \"dyers\", \"cotta\", \"matzo\", \"lager\", \"zebus\", \"crass\", \"dacha\", \"kneed\", \"dicta\", \"fakir\", \"knurl\", \"runny\", \"unpin\", \"julep\", \"globs\", \"nudes\", \"sushi\", \"tacky\", \"stoke\", \"kaput\", \"butch\", \"hulas\", \"croft\", \"achoo\", \"genii\", \"nodal\", \"outgo\", \"spiel\", \"viols\", \"fetid\", \"cagey\", \"fudgy\", \"epoxy\", \"leggy\", \"hanky\", \"lapis\", \"felon\", \"beefy\", \"coots\", \"melba\", \"caddy\", \"segue\", \"betel\", \"frizz\", \"drear\", \"kooks\", \"turbo\", \"hoagy\", \"moult\", \"helix\", \"zonal\", \"arias\", \"nosey\", \"paean\", \"lacey\", \"banns\", \"swain\", \"fryer\", \"retch\", \"tenet\", \"gigas\", \"whiny\", \"ogled\", \"rumen\", \"begot\", \"cruse\", \"abuts\", \"riven\", \"balks\", \"sines\", \"sigma\", \"abase\", \"ennui\", \"gores\", \"unset\", \"augur\", \"sated\", \"odium\", \"latin\", \"dings\", \"moire\", \"scion\", \"henna\", \"kraut\", \"dicks\", \"lifer\", \"prigs\", \"bebop\", \"gages\", \"gazer\", \"fanny\", \"gibes\", \"aural\", \"tempi\", \"hooch\", \"rapes\", \"snuck\", \"harts\", \"techs\", \"emend\", \"ninny\", \"guava\", \"scarp\", \"liege\", \"tufty\", \"sepia\", \"tomes\", \"carob\", \"emcee\", \"prams\", \"poser\", \"verso\", \"hubba\", \"joule\", \"baize\", \"blips\", \"scrim\", \"cubby\", \"clave\", \"winos\", \"rearm\", \"liens\", \"lumen\", \"chump\", \"nanny\", \"trump\", \"fichu\", \"chomp\", \"homos\", \"purty\", \"maser\", \"woosh\", \"patsy\", \"shill\", \"rusks\", \"avast\", \"swami\", \"boded\", \"ahhhh\", \"lobed\", \"natch\", \"shish\", \"tansy\", \"snoot\", \"payer\", \"altho\", \"sappy\", \"laxer\", \"hubby\", \"aegis\", \"riles\", \"ditto\", \"jazzy\", \"dingo\", \"quasi\", \"septa\", \"peaky\", \"lorry\", \"heerd\", \"bitty\", \"payee\", \"seamy\", \"apses\", \"imbue\", \"belie\", \"chary\", \"spoof\", \"phyla\", \"clime\", \"babel\", \"wacky\", \"sumps\", \"skids\", \"khans\", \"crypt\", \"inure\", \"nonce\", \"outen\", \"faire\", \"hooey\", \"anole\", \"kazoo\", \"calve\", \"limbo\", \"argot\", \"ducky\", \"faker\", \"vibes\", \"gassy\", \"unlit\", \"nervy\", \"femme\", \"biter\", \"fiche\", \"boors\", \"gaffe\", \"saxes\", \"recap\", \"synch\", \"facie\", \"dicey\", \"ouija\", \"hewer\", \"legit\", \"gurus\", \"edify\", \"tweak\", \"caron\", \"typos\", \"rerun\", \"polly\", \"surds\", \"hamza\", \"nulls\", \"hater\", \"lefty\", \"mogul\", \"mafia\", \"debug\", \"pates\", \"blabs\", \"splay\", \"talus\", \"porno\", \"moola\", \"nixed\", \"kilos\", \"snide\", \"horsy\", \"gesso\", \"jaggy\", \"trove\", \"nixes\", \"creel\", \"pater\", \"iotas\", \"cadge\", \"skyed\", \"hokum\", \"furze\", \"ankhs\", \"curie\", \"nutsy\", \"hilum\", \"remix\", \"angst\", \"burls\", \"jimmy\", \"veiny\", \"tryst\", \"codon\", \"befog\", \"gamed\", \"flume\", \"axman\", \"doozy\", \"lubes\", \"rheas\", \"bozos\", \"butyl\", \"kelly\", \"mynah\", \"jocks\", \"donut\", \"avian\", \"wurst\", \"chock\", \"quash\", \"quals\", \"hayed\", \"bombe\", \"cushy\", \"spacy\", \"puked\", \"leery\", \"thews\", \"prink\", \"amens\", \"tesla\", \"intro\", \"fiver\", \"frump\", \"capos\", \"opine\", \"coder\", \"namer\", \"jowly\", \"pukes\", \"haled\", \"chard\", \"duffs\", \"bruin\", \"reuse\", \"whang\", \"toons\", \"frats\", \"silty\", \"telex\", \"cutup\", \"nisei\", \"neato\", \"decaf\", \"softy\", \"bimbo\", \"adlib\", \"loony\", \"shoed\", \"agues\", \"peeve\", \"noway\", \"gamey\", \"sarge\", \"reran\", \"epact\", \"potty\", \"coned\", \"upend\", \"narco\", \"ikats\", \"whorl\", \"jinks\", \"tizzy\", \"weepy\", \"posit\", \"marge\", \"vegan\", \"clops\", \"numbs\", \"reeks\", \"rubes\", \"rower\", \"biped\", \"tiffs\", \"hocus\", \"hammy\", \"bunco\", \"fixit\", \"tykes\", \"chaws\", \"yucky\", \"hokey\", \"resew\", \"maven\", \"adman\", \"scuzz\", \"slogs\", \"souse\", \"nacho\", \"mimed\", \"melds\", \"boffo\", \"debit\", \"pinup\", \"vagus\", \"gulag\", \"randy\", \"bosun\", \"educe\", \"faxes\", \"auras\", \"pesto\", \"antsy\", \"betas\", \"fizzy\", \"dorky\", \"snits\", \"moxie\", \"thane\", \"mylar\", \"nobby\", \"gamin\", \"gouty\", \"esses\", \"goyim\", \"paned\", \"druid\", \"jades\", \"rehab\", \"gofer\", \"tzars\", \"octet\", \"homed\", \"socko\", \"dorks\", \"eared\", \"anted\", \"elide\", \"fazes\", \"oxbow\", \"dowse\", \"situs\", \"macaw\", \"scone\", \"drily\", \"hyper\", \"salsa\", \"mooch\", \"gated\", \"unjam\", \"lipid\", \"mitre\", \"venal\", \"knish\", \"ritzy\", \"divas\", \"torus\", \"mange\", \"dimer\", \"recut\", \"meson\", \"wined\", \"fends\", \"phage\", \"fiats\", \"caulk\", \"cavil\", \"panty\", \"roans\", \"bilks\", \"hones\", \"botch\", \"estop\", \"sully\", \"sooth\", \"gelds\", \"ahold\", \"raper\", \"pager\", \"fixer\", \"infix\", \"hicks\", \"tuxes\", \"plebe\", \"twits\", \"abash\", \"twixt\", \"wacko\", \"primp\", \"nabla\", \"girts\", \"miffs\", \"emote\", \"xerox\", \"rebid\", \"shahs\", \"rutty\", \"grout\", \"grift\", \"deify\", \"biddy\", \"kopek\", \"semis\", \"bries\", \"acmes\", \"piton\", \"hussy\", \"torts\", \"disco\", \"whore\", \"boozy\", \"gibed\", \"vamps\", \"amour\", \"soppy\", \"gonzo\", \"durst\", \"wader\", \"tutus\", \"perms\", \"catty\", \"glitz\", \"brigs\", \"nerds\", \"barmy\", \"gizmo\", \"owlet\", \"sayer\", \"molls\", \"shard\", \"whops\", \"comps\", \"corer\", \"colas\", \"matte\", \"droid\", \"ploys\", \"vapid\", \"cairn\", \"deism\", \"mixup\", \"yikes\", \"prosy\", \"raker\", \"flubs\", \"whish\", \"reify\", \"craps\", \"shags\", \"clone\", \"hazed\", \"macho\", \"recto\", \"refix\", \"drams\", \"biker\", \"aquas\", \"porky\", \"doyen\", \"exude\", \"goofs\", \"divvy\", \"noels\", \"jived\", \"hulky\", \"cager\", \"harpy\", \"oldie\", \"vivas\", \"admix\", \"codas\", \"zilch\", \"deist\", \"orcas\", \"retro\", \"pilaf\", \"parse\", \"rants\", \"zingy\", \"toddy\", \"chiff\", \"micro\", \"veeps\", \"girly\", \"nexus\", \"demos\", \"bibbs\", \"antes\", \"lulus\", \"gnarl\", \"zippy\", \"ivied\", \"epees\", \"wimps\", \"tromp\", \"grail\", \"yoyos\", \"poufs\", \"hales\", \"roust\", \"cabal\", \"rawer\", \"pampa\", \"mosey\", \"kefir\", \"burgs\", \"unmet\", \"cuspy\", \"boobs\", \"boons\", \"hypes\", \"dynes\", \"nards\", \"lanai\", \"yogis\", \"sepal\", \"quark\", \"toked\", \"prate\", \"ayins\", \"hawed\", \"swigs\", \"vitas\", \"toker\", \"doper\", \"bossa\", \"linty\", \"foist\", \"mondo\", \"stash\", \"kayos\", \"twerp\", \"zesty\", \"capon\", \"wimpy\", \"rewed\", \"fungo\", \"tarot\", \"frosh\", \"kabob\", \"pinko\", \"redid\", \"mimeo\", \"heist\", \"tarps\", \"lamas\", \"sutra\", \"dinar\", \"whams\", \"busty\", \"spays\", \"mambo\", \"nabob\", \"preps\", \"odour\", \"cabby\", \"conks\", \"sluff\", \"dados\", \"houri\", \"swart\", \"balms\", \"gutsy\", \"faxed\", \"egads\", \"pushy\", \"retry\", \"agora\", \"drubs\", \"daffy\", \"chits\", \"mufti\", \"karma\", \"lotto\", \"toffs\", \"burps\", \"deuce\", \"zings\", \"kappa\", \"clads\", \"doggy\", \"duper\", \"scams\", \"ogler\", \"mimes\", \"throe\", \"zetas\", \"waled\", \"promo\", \"blats\", \"muffs\", \"oinks\", \"viand\", \"coset\", \"finks\", \"faddy\", \"minis\", \"snafu\", \"sauna\", \"usury\", \"muxes\", \"craws\", \"stats\", \"condo\", \"coxes\", \"loopy\", \"dorms\", \"ascot\", \"dippy\", \"execs\", \"dopey\", \"envoi\", \"umpty\", \"gismo\", \"fazed\", \"strop\", \"jives\", \"slims\", \"batik\", \"pings\", \"sonly\", \"leggo\", \"pekoe\", \"prawn\", \"luaus\", \"campy\", \"oodle\", \"prexy\", \"proms\", \"touts\", \"ogles\", \"tweet\", \"toady\", \"naiad\", \"hider\", \"nuked\", \"fatso\", \"sluts\", \"obits\", \"narcs\", \"tyros\", \"delis\", \"wooer\", \"hyped\", \"poset\", \"byway\", \"texas\", \"scrod\", \"avows\", \"futon\", \"torte\", \"tuple\", \"carom\", \"kebab\", \"tamps\", \"jilts\", \"duals\", \"artsy\", \"repro\", \"modem\", \"toped\", \"psych\", \"sicko\", \"klutz\", \"tarns\", \"coxed\", \"drays\", \"cloys\", \"anded\", \"piker\", \"aimer\", \"suras\", \"limos\", \"flack\", \"hapax\", \"dutch\", \"mucky\", \"shire\", \"klieg\", \"staph\", \"layup\", \"tokes\", \"axing\", \"toper\", \"duvet\", \"cowry\", \"profs\", \"blahs\", \"addle\", \"sudsy\", \"batty\", \"coifs\", \"suety\", \"gabby\", \"hafta\", \"pitas\", \"gouda\", \"deice\", \"taupe\", \"topes\", \"duchy\", \"nitro\", \"carny\", \"limey\", \"orals\", \"hirer\", \"taxer\", \"roils\", \"ruble\", \"elate\", \"dolor\", \"wryer\", \"snots\", \"quais\", \"coked\", \"gimel\", \"gorse\", \"minas\", \"goest\", \"agape\", \"manta\", \"jings\", \"iliac\", \"admen\", \"offen\", \"cills\", \"offal\", \"lotta\", \"bolas\", \"thwap\", \"alway\", \"boggy\", \"donna\", \"locos\", \"belay\", \"gluey\", \"bitsy\", \"mimsy\", \"hilar\", \"outta\", \"vroom\", \"fetal\", \"raths\", \"renal\", \"dyads\", \"crocs\", \"vires\", \"culpa\", \"kivas\", \"feist\", \"teats\", \"thats\", \"yawls\", \"whens\", \"abaca\", \"ohhhh\", \"aphis\", \"fusty\", \"eclat\", \"perdu\", \"mayst\", \"exeat\", \"molly\", \"supra\", \"wetly\", \"plasm\", \"buffa\", \"semen\", \"pukka\", \"tagua\", \"paras\", \"stoat\", \"secco\", \"carte\", \"haute\", \"molal\", \"shads\", \"forma\", \"ovoid\", \"pions\", \"modus\", \"bueno\", \"rheum\", \"scurf\", \"parer\", \"ephah\", \"doest\", \"sprue\", \"flams\", \"molto\", \"dieth\", \"choos\", \"miked\", \"bronx\", \"goopy\", \"bally\", \"plumy\", \"moony\", \"morts\", \"yourn\", \"bipod\", \"spume\", \"algal\", \"ambit\", \"mucho\", \"spued\", \"dozer\", \"harum\", \"groat\", \"skint\", \"laude\", \"thrum\", \"pappy\", \"oncet\", \"rimed\", \"gigue\", \"limed\", \"plein\", \"redly\", \"humpf\", \"lites\", \"seest\", \"grebe\", \"absit\", \"thanx\", \"pshaw\", \"yawps\", \"plats\", \"payed\", \"areal\", \"tilth\", \"youse\", \"gwine\", \"thees\", \"watsa\", \"lento\", \"spitz\", \"yawed\", \"gipsy\", \"sprat\", \"cornu\", \"amahs\", \"blowy\", \"wahoo\", \"lubra\", \"mecum\", \"whooo\", \"coqui\", \"sabra\", \"edema\", \"mrads\", \"dicot\", \"astro\", \"kited\", \"ouzel\", \"didos\", \"grata\", \"bonne\", \"axmen\", \"klunk\", \"summa\", \"laves\", \"purls\", \"yawny\", \"teary\", \"masse\", \"largo\", \"bazar\", \"pssst\", \"sylph\", \"lulab\", \"toque\", \"fugit\", \"plunk\", \"ortho\", \"lucre\", \"cooch\", \"whipt\", \"folky\", \"tyres\", \"wheee\", \"corky\", \"injun\", \"solon\", \"didot\", \"kerfs\", \"rayed\", \"wassa\", \"chile\", \"begat\", \"nippy\", \"litre\", \"magna\", \"rebox\", \"hydro\", \"milch\", \"brent\", \"gyves\", \"lazed\", \"feued\", \"mavis\", \"inapt\", \"baulk\", \"casus\", \"scrum\", \"wised\", \"fossa\", \"dower\", \"kyrie\", \"bhoys\", \"scuse\", \"feuar\", \"ohmic\", \"juste\", \"ukase\", \"beaux\", \"tusky\", \"orate\", \"musta\", \"lardy\", \"intra\", \"quiff\", \"epsom\", \"neath\", \"ocher\", \"tared\", \"homme\", \"mezzo\", \"corms\", \"psoas\", \"beaky\", \"terry\", \"infra\", \"spivs\", \"tuans\", \"belli\", \"bergs\", \"anima\", \"weirs\", \"mahua\", \"scops\", \"manse\", \"titre\", \"curia\", \"kebob\", \"cycad\", \"talky\", \"fucks\", \"tapis\", \"amide\", \"dolce\", \"sloes\", \"jakes\", \"russe\", \"blash\", \"tutti\", \"pruta\", \"panga\", \"blebs\", \"tench\", \"swarf\", \"herem\", \"missy\", \"merse\", \"pawky\", \"limen\", \"vivre\", \"chert\", \"unsee\", \"tiros\", \"brack\", \"foots\", \"welsh\", \"fosse\", \"knops\", \"ileum\", \"noire\", \"firma\", \"podgy\", \"laird\", \"thunk\", \"shute\", \"rowan\", \"shoji\", \"poesy\", \"uncap\", \"fames\", \"glees\", \"costa\", \"turps\", \"fores\", \"solum\", \"imago\", \"byres\", \"fondu\", \"coney\", \"polis\", \"dictu\", \"kraal\", \"sherd\", \"mumbo\", \"wroth\", \"chars\", \"unbox\", \"vacuo\", \"slued\", \"weest\", \"hades\", \"wiled\", \"syncs\", \"muser\", \"excon\", \"hoars\", \"sibyl\", \"passe\", \"joeys\", \"lotsa\", \"lepta\", \"shays\", \"bocks\", \"endue\", \"darer\", \"nones\", \"ileus\", \"plash\", \"busby\", \"wheal\", \"buffo\", \"yobbo\", \"biles\", \"poxes\", \"rooty\", \"licit\", \"terce\", \"bromo\", \"hayey\", \"dweeb\", \"imbed\", \"saran\", \"bruit\", \"punky\", \"softs\", \"biffs\", \"loppy\", \"agars\", \"aquae\", \"livre\", \"biome\", \"bunds\", \"shews\", \"diems\", \"ginny\", \"degum\", \"polos\", \"desex\", \"unman\", \"dungy\", \"vitam\", \"wedgy\", \"glebe\", \"apers\", \"ridgy\", \"roids\", \"wifey\", \"vapes\", \"whoas\", \"bunko\", \"yolky\", \"ulnas\", \"reeky\", \"bodge\", \"brant\", \"davit\", \"deque\", \"liker\", \"jenny\", \"tacts\", \"fulls\", \"treap\", \"ligne\", \"acked\", \"refry\", \"vower\", \"aargh\", \"churl\", \"momma\", \"gaols\", \"whump\", \"arras\", \"marls\", \"tiler\", \"grogs\", \"memes\", \"midis\", \"tided\", \"haler\", \"duces\", \"twiny\", \"poste\", \"unrig\", \"prise\", \"drabs\", \"quids\", \"facer\", \"spier\", \"baric\", \"geoid\", \"remap\", \"trier\", \"gunks\", \"steno\", \"stoma\", \"airer\", \"ovate\", \"torah\", \"apian\", \"smuts\", \"pocks\", \"yurts\", \"exurb\", \"defog\", \"nuder\", \"bosky\", \"nimbi\", \"mothy\", \"joyed\", \"labia\", \"pards\", \"jammy\", \"bigly\", \"faxer\", \"hoppy\", \"nurbs\", \"cotes\", \"dishy\", \"vised\", \"celeb\", \"pismo\", \"casas\", \"withs\", \"dodgy\", \"scudi\", \"mungs\", \"muons\", \"ureas\", \"ioctl\", \"unhip\", \"krone\", \"sager\", \"verst\", \"expat\", \"gronk\", \"uvula\", \"shawm\", \"bilgy\", \"braes\", \"cento\", \"webby\", \"lippy\", \"gamic\", \"lordy\", \"mazed\", \"tings\", \"shoat\", \"faery\", \"wirer\", \"diazo\", \"carer\", \"rater\", \"greps\", \"rente\", \"zloty\", \"viers\", \"unapt\", \"poops\", \"fecal\", \"kepis\", \"taxon\", \"eyers\", \"wonts\", \"spina\", \"stoae\", \"yenta\", \"pooey\", \"buret\", \"japan\", \"bedew\", \"hafts\", \"selfs\", \"oared\", \"herby\", \"pryer\", \"oakum\", \"dinks\", \"titty\", \"sepoy\", \"penes\", \"fusee\", \"winey\", \"gimps\", \"nihil\", \"rille\", \"giber\", \"ousel\", \"umiak\", \"cuppy\", \"hames\", \"shits\", \"azine\", \"glads\", \"tacet\", \"bumph\", \"coyer\", \"honky\", \"gamer\", \"gooky\", \"waspy\", \"sedgy\", \"bents\", \"varia\", \"djinn\", \"junco\", \"pubic\", \"wilco\", \"lazes\", \"idyls\", \"lupus\", \"rives\", \"snood\", \"schmo\", \"spazz\", \"finis\", \"noter\", \"pavan\", \"orbed\", \"bates\", \"pipet\", \"baddy\", \"goers\", \"shako\", \"stets\", \"sebum\", \"seeth\", \"lobar\", \"raver\", \"ajuga\", \"riced\", \"velds\", \"dribs\", \"ville\", \"dhows\", \"unsew\", \"halma\", \"krona\", \"limby\", \"jiffs\", \"treys\", \"bauds\", \"pffft\", \"mimer\", \"plebs\", \"caner\", \"jiber\", \"cuppa\", \"washy\", \"chuff\", \"unarm\", \"yukky\", \"styes\", \"waker\", \"flaks\", \"maces\", \"rimes\", \"gimpy\", \"guano\", \"liras\", \"kapok\", \"scuds\", \"bwana\", \"oring\", \"aider\", \"prier\", \"klugy\", \"monte\", \"golem\", \"velar\", \"firer\", \"pieta\", \"umbel\", \"campo\", \"unpeg\", \"fovea\", \"abeam\", \"boson\", \"asker\", \"goths\", \"vocab\", \"vined\", \"trows\", \"tikis\", \"loper\", \"indie\", \"boffs\", \"spang\", \"grapy\", \"tater\", \"ichor\", \"kilty\", \"lochs\", \"supes\", \"degas\", \"flics\", \"torsi\", \"beths\", \"weber\", \"resaw\", \"lawny\", \"coven\", \"mujik\", \"relet\", \"therm\", \"heigh\", \"shnor\", \"trued\", \"zayin\", \"liest\", \"barfs\", \"bassi\", \"qophs\", \"roily\", \"flabs\", \"punny\", \"okras\", \"hanks\", \"dipso\", \"nerfs\", \"fauns\", \"calla\", \"pseud\", \"lurer\", \"magus\", \"obeah\", \"atria\", \"twink\", \"palmy\", \"pocky\", \"pends\", \"recta\", \"plonk\", \"slaws\", \"keens\", \"nicad\", \"pones\", \"inker\", \"whews\", \"groks\", \"mosts\", \"trews\", \"ulnar\", \"gyppy\", \"cocas\", \"expos\", \"eruct\", \"oiler\", \"vacua\", \"dreck\", \"dater\", \"arums\", \"tubal\", \"voxel\", \"dixit\", \"beery\", \"assai\", \"lades\", \"actin\", \"ghoti\", \"buzzy\", \"meads\", \"grody\", \"ribby\", \"clews\", \"creme\", \"email\", \"pyxie\", \"kulak\", \"bocci\", \"rived\", \"duddy\", \"hoper\", \"lapin\", \"wonks\", \"petri\", \"phial\", \"fugal\", \"holon\", \"boomy\", \"duomo\", \"musos\", \"shier\", \"hayer\", \"porgy\", \"hived\", \"litho\", \"fisty\", \"stagy\", \"luvya\", \"maria\", \"smogs\", \"asana\", \"yogic\", \"slomo\", \"fawny\", \"amine\", \"wefts\", \"gonad\", \"twirp\", \"brava\", \"plyer\", \"fermi\", \"loges\", \"niter\", \"revet\", \"unate\", \"gyved\", \"totty\", \"zappy\", \"honer\", \"giros\", \"dicer\", \"calks\", \"luxes\", \"monad\", \"cruft\", \"quoin\", \"fumer\", \"amped\", \"shlep\", \"vinca\", \"yahoo\", \"vulva\", \"zooey\", \"dryad\", \"nixie\", \"moper\", \"iambs\", \"lunes\", \"nudie\", \"limns\", \"weals\", \"nohow\", \"miaow\", \"gouts\", \"mynas\", \"mazer\", \"kikes\", \"oxeye\", \"stoup\", \"jujus\", \"debar\", \"pubes\", \"taels\", \"defun\", \"rands\", \"blear\", \"paver\", \"goosy\", \"sprog\", \"oleos\", \"toffy\", \"pawer\", \"maced\", \"crits\", \"kluge\", \"tubed\", \"sahib\", \"ganef\", \"scats\", \"sputa\", \"vaned\", \"acned\", \"taxol\", \"plink\", \"oweth\", \"tribs\", \"resay\", \"boule\", \"thous\", \"haply\", \"glans\", \"maxis\", \"bezel\", \"antis\", \"porks\", \"quoit\", \"alkyd\", \"glary\", \"beamy\", \"hexad\", \"bonks\", \"tecum\", \"kerbs\", \"filar\", \"frier\", \"redux\", \"abuzz\", \"fader\", \"shoer\", \"couth\", \"trues\", \"guyed\", \"goony\", \"booky\", \"fuzes\", \"hurly\", \"genet\", \"hodad\", \"calix\", \"filer\", \"pawls\", \"iodic\", \"utero\", \"henge\", \"unsay\", \"liers\", \"piing\", \"weald\", \"sexed\", \"folic\", \"poxed\", \"cunts\", \"anile\", \"kiths\", \"becks\", \"tatty\", \"plena\", \"rebar\", \"abled\", \"toyer\", \"attar\", \"teaks\", \"aioli\", \"awing\", \"anent\", \"feces\", \"redip\", \"wists\", \"prats\", \"mesne\", \"muter\", \"smurf\", \"owest\", \"bahts\", \"lossy\", \"ftped\", \"hunky\", \"hoers\", \"slier\", \"sicks\", \"fatly\", \"delft\", \"hiver\", \"himbo\", \"pengo\", \"busks\", \"loxes\", \"zonks\", \"ilium\", \"aport\", \"ikons\", \"mulct\", \"reeve\", \"civvy\", \"canna\", \"barfy\", \"kaiak\", \"scudo\", \"knout\", \"gaper\", \"bhang\", \"pease\", \"uteri\", \"lases\", \"paten\", \"rasae\", \"axels\", \"stoas\", \"ombre\", \"styli\", \"gunky\", \"hazer\", \"kenaf\", \"ahoys\", \"ammos\", \"weeny\", \"urger\", \"kudzu\", \"paren\", \"bolos\", \"fetor\", \"nitty\", \"techy\", \"lieth\", \"somas\", \"darky\", \"villi\", \"gluon\", \"janes\", \"cants\", \"farts\", \"socle\", \"jinns\", \"ruing\", \"slily\", \"ricer\", \"hadda\", \"wowee\", \"rices\", \"nerts\", \"cauls\", \"swive\", \"lilty\", \"micks\", \"arity\", \"pasha\", \"finif\", \"oinky\", \"gutty\", \"tetra\", \"wises\", \"wolds\", \"balds\", \"picot\", \"whats\", \"shiki\", \"bungs\", \"snarf\", \"legos\", \"dungs\", \"stogy\", \"berms\", \"tangs\", \"vails\", \"roods\", \"morel\", \"sware\", \"elans\", \"latus\", \"gules\", \"razer\", \"doxie\", \"buena\", \"overs\", \"gutta\", \"zincs\", \"nates\", \"kirks\", \"tikes\", \"donee\", \"jerry\", \"mohel\", \"ceder\", \"doges\", \"unmap\", \"folia\", \"rawly\", \"snark\", \"topoi\", \"ceils\", \"immix\", \"yores\", \"diest\", \"bubba\", \"pomps\", \"forky\", \"turdy\", \"lawzy\", \"poohs\", \"worts\", \"gloms\", \"beano\", \"muley\", \"barky\", \"tunny\", \"auric\", \"funks\", \"gaffs\", \"cordy\", \"curdy\", \"lisle\", \"toric\", \"soyas\", \"reman\", \"mungy\", \"carpy\", \"apish\", \"oaten\", \"gappy\", \"aurae\", \"bract\", \"rooky\", \"axled\", \"burry\", \"sizer\", \"proem\", \"turfy\", \"impro\", \"mashy\", \"miens\", \"nonny\", \"olios\", \"grook\", \"sates\", \"agley\", \"corgi\", \"dashy\", \"doser\", \"dildo\", \"apsos\", \"xored\", \"laker\", \"playa\", \"selah\", \"malty\", \"dulse\", \"frigs\", \"demit\", \"whoso\", \"rials\", \"sawer\", \"spics\", \"bedim\", \"snugs\", \"fanin\", \"azoic\", \"icers\", \"suers\", \"wizen\", \"koine\", \"topos\", \"shirr\", \"rifer\", \"feral\", \"laded\", \"lased\", \"turds\", \"swede\", \"easts\", \"cozen\", \"unhit\", \"pally\", \"aitch\", \"sedum\", \"coper\", \"ruche\", \"geeks\", \"swags\", \"etext\", \"algin\", \"offed\", \"ninja\", \"holer\", \"doter\", \"toter\", \"besot\", \"dicut\", \"macer\", \"peens\", \"pewit\", \"redox\", \"poler\", \"yecch\", \"fluky\", \"doeth\", \"twats\", \"cruds\", \"bebug\", \"bider\", \"stele\", \"hexer\", \"wests\", \"gluer\", \"pilau\", \"abaft\", \"whelm\", \"lacer\", \"inode\", \"tabus\", \"gator\", \"cuing\", \"refly\", \"luted\", \"cukes\", \"bairn\", \"bight\", \"arses\", \"crump\", \"loggy\", \"blini\", \"spoor\", \"toyon\", \"harks\", \"wazoo\", \"fenny\", \"naves\", \"keyer\", \"tufas\", \"morph\", \"rajas\", \"typal\", \"spiff\", \"oxlip\", \"unban\", \"mussy\", \"finny\", \"rimer\", \"login\", \"molas\", \"cirri\", \"huzza\", \"agone\", \"unsex\", \"unwon\", \"peats\", \"toile\", \"zombi\", \"dewed\", \"nooky\", \"alkyl\", \"ixnay\", \"dovey\", \"holey\", \"cuber\", \"amyls\", \"podia\", \"chino\", \"apnea\", \"prims\", \"lycra\", \"johns\", \"primo\", \"fatwa\", \"egger\", \"hempy\", \"snook\", \"hying\", \"fuzed\", \"barms\", \"crink\", \"moots\", \"yerba\", \"rhumb\", \"unarc\", \"direr\", \"munge\", \"eland\", \"nares\", \"wrier\", \"noddy\", \"atilt\", \"jukes\", \"ender\", \"thens\", \"unfix\", \"doggo\", \"zooks\", \"diddy\", \"shmoo\", \"brusk\", \"prest\", \"curer\", \"pasts\", \"kelpy\", \"bocce\", \"kicky\", \"taros\", \"lings\", \"dicky\", \"nerdy\", \"abend\", \"stela\", \"biggy\", \"laved\", \"baldy\", \"pubis\", \"gooks\", \"wonky\", \"stied\", \"hypos\", \"assed\", \"spumy\", \"osier\", \"roble\", \"rumba\", \"biffy\", \"pupal\"]\r\n\r\nconst answers = [\"aback\", \"abase\", \"abate\", \"abbey\", \"abbot\", \"abhor\", \"abide\", \"abled\", \"abode\", \"abort\", \"about\", \"above\", \"abuse\", \"abyss\", \"acorn\", \"acrid\", \"actor\", \"acute\", \"adage\", \"adapt\", \"adept\", \"admin\", \"admit\", \"adobe\", \"adopt\", \"adore\", \"adorn\", \"adult\", \"affix\", \"afire\", \"afoot\", \"afoul\", \"after\", \"again\", \"agape\", \"agate\", \"agent\", \"agile\", \"aging\", \"aglow\", \"agony\", \"agora\", \"agree\", \"ahead\", \"aider\", \"aisle\", \"alarm\", \"album\", \"alert\", \"algae\", \"alibi\", \"alien\", \"align\", \"alike\", \"alive\", \"allay\", \"alley\", \"allot\", \"allow\", \"alloy\", \"aloft\", \"alone\", \"along\", \"aloof\", \"aloud\", \"alpha\", \"altar\", \"alter\", \"amass\", \"amaze\", \"amber\", \"amble\", \"amend\", \"amiss\", \"amity\", \"among\", \"ample\", \"amply\", \"amuse\", \"angel\", \"anger\", \"angle\", \"angry\", \"angst\", \"anime\", \"ankle\", \"annex\", \"annoy\", \"annul\", \"anode\", \"antic\", \"anvil\", \"aorta\", \"apart\", \"aphid\", \"aping\", \"apnea\", \"apple\", \"apply\", \"apron\", \"aptly\", \"arbor\", \"ardor\", \"arena\", \"argue\", \"arise\", \"armor\", \"aroma\", \"arose\", \"array\", \"arrow\", \"arson\", \"artsy\", \"ascot\", \"ashen\", \"aside\", \"askew\", \"assay\", \"asset\", \"atoll\", \"atone\", \"attic\", \"audio\", \"audit\", \"augur\", \"aunty\", \"avail\", \"avert\", \"avian\", \"avoid\", \"await\", \"awake\", \"award\", \"aware\", \"awash\", \"awful\", \"awoke\", \"axial\", \"axiom\", \"axion\", \"azure\", \"bacon\", \"badge\", \"badly\", \"bagel\", \"baggy\", \"baker\", \"baler\", \"balmy\", \"banal\", \"banjo\", \"barge\", \"baron\", \"basal\", \"basic\", \"basil\", \"basin\", \"basis\", \"baste\", \"batch\", \"bathe\", \"baton\", \"batty\", \"bawdy\", \"bayou\", \"beach\", \"beady\", \"beard\", \"beast\", \"beech\", \"beefy\", \"befit\", \"began\", \"begat\", \"beget\", \"begin\", \"begun\", \"being\", \"belch\", \"belie\", \"belle\", \"belly\", \"below\", \"bench\", \"beret\", \"berry\", \"berth\", \"beset\", \"betel\", \"bevel\", \"bezel\", \"bible\", \"bicep\", \"biddy\", \"bigot\", \"bilge\", \"billy\", \"binge\", \"bingo\", \"biome\", \"birch\", \"birth\", \"bison\", \"bitty\", \"black\", \"blade\", \"blame\", \"bland\", \"blank\", \"blare\", \"blast\", \"blaze\", \"bleak\", \"bleat\", \"bleed\", \"bleep\", \"blend\", \"bless\", \"blimp\", \"blind\", \"blink\", \"bliss\", \"blitz\", \"bloat\", \"block\", \"bloke\", \"blond\", \"blood\", \"bloom\", \"blown\", \"bluer\", \"bluff\", \"blunt\", \"blurb\", \"blurt\", \"blush\", \"board\", \"boast\", \"bobby\", \"boney\", \"bongo\", \"bonus\", \"booby\", \"boost\", \"booth\", \"booty\", \"booze\", \"boozy\", \"borax\", \"borne\", \"bosom\", \"bossy\", \"botch\", \"bough\", \"boule\", \"bound\", \"bowel\", \"boxer\", \"brace\", \"braid\", \"brain\", \"brake\", \"brand\", \"brash\", \"brass\", \"brave\", \"bravo\", \"brawl\", \"brawn\", \"bread\", \"break\", \"breed\", \"briar\", \"bribe\", \"brick\", \"bride\", \"brief\", \"brine\", \"bring\", \"brink\", \"briny\", \"brisk\", \"broad\", \"broil\", \"broke\", \"brood\", \"brook\", \"broom\", \"broth\", \"brown\", \"brunt\", \"brush\", \"brute\", \"buddy\", \"budge\", \"buggy\", \"bugle\", \"build\", \"built\", \"bulge\", \"bulky\", \"bully\", \"bunch\", \"bunny\", \"burly\", \"burnt\", \"burst\", \"bused\", \"bushy\", \"butch\", \"butte\", \"buxom\", \"buyer\", \"bylaw\", \"cabal\", \"cabby\", \"cabin\", \"cable\", \"cacao\", \"cache\", \"cacti\", \"caddy\", \"cadet\", \"cagey\", \"cairn\", \"camel\", \"cameo\", \"canal\", \"candy\", \"canny\", \"canoe\", \"canon\", \"caper\", \"caput\", \"carat\", \"cargo\", \"carol\", \"carry\", \"carve\", \"caste\", \"catch\", \"cater\", \"catty\", \"caulk\", \"cause\", \"cavil\", \"cease\", \"cedar\", \"cello\", \"chafe\", \"chaff\", \"chain\", \"chair\", \"chalk\", \"champ\", \"chant\", \"chaos\", \"chard\", \"charm\", \"chart\", \"chase\", \"chasm\", \"cheap\", \"cheat\", \"check\", \"cheek\", \"cheer\", \"chess\", \"chest\", \"chick\", \"chide\", \"chief\", \"child\", \"chili\", \"chill\", \"chime\", \"china\", \"chirp\", \"chock\", \"choir\", \"choke\", \"chord\", \"chore\", \"chose\", \"chuck\", \"chump\", \"chunk\", \"churn\", \"chute\", \"cider\", \"cigar\", \"cinch\", \"circa\", \"civic\", \"civil\", \"clack\", \"claim\", \"clamp\", \"clang\", \"clank\", \"clash\", \"clasp\", \"class\", \"clean\", \"clear\", \"cleat\", \"cleft\", \"clerk\", \"click\", \"cliff\", \"climb\", \"cling\", \"clink\", \"cloak\", \"clock\", \"clone\", \"close\", \"cloth\", \"cloud\", \"clout\", \"clove\", \"clown\", \"cluck\", \"clued\", \"clump\", \"clung\", \"coach\", \"coast\", \"cobra\", \"cocoa\", \"colon\", \"color\", \"comet\", \"comfy\", \"comic\", \"comma\", \"conch\", \"condo\", \"conic\", \"copse\", \"coral\", \"corer\", \"corny\", \"couch\", \"cough\", \"could\", \"count\", \"coupe\", \"court\", \"coven\", \"cover\", \"covet\", \"covey\", \"cower\", \"coyly\", \"crack\", \"craft\", \"cramp\", \"crane\", \"crank\", \"crash\", \"crass\", \"crate\", \"crave\", \"crawl\", \"craze\", \"crazy\", \"creak\", \"cream\", \"credo\", \"creed\", \"creek\", \"creep\", \"creme\", \"crepe\", \"crept\", \"cress\", \"crest\", \"crick\", \"cried\", \"crier\", \"crime\", \"crimp\", \"crisp\", \"croak\", \"crock\", \"crone\", \"crony\", \"crook\", \"cross\", \"croup\", \"crowd\", \"crown\", \"crude\", \"cruel\", \"crumb\", \"crump\", \"crush\", \"crust\", \"crypt\", \"cubic\", \"cumin\", \"curio\", \"curly\", \"curry\", \"curse\", \"curve\", \"curvy\", \"cutie\", \"cyber\", \"cycle\", \"cynic\", \"daddy\", \"daily\", \"dairy\", \"daisy\", \"dally\", \"dance\", \"dandy\", \"datum\", \"daunt\", \"dealt\", \"death\", \"debar\", \"debit\", \"debug\", \"debut\", \"decal\", \"decay\", \"decor\", \"decoy\", \"decry\", \"defer\", \"deign\", \"deity\", \"delay\", \"delta\", \"delve\", \"demon\", \"demur\", \"denim\", \"dense\", \"depot\", \"depth\", \"derby\", \"deter\", \"detox\", \"deuce\", \"devil\", \"diary\", \"dicey\", \"digit\", \"dilly\", \"dimly\", \"diner\", \"dingo\", \"dingy\", \"diode\", \"dirge\", \"dirty\", \"disco\", \"ditch\", \"ditto\", \"ditty\", \"diver\", \"dizzy\", \"dodge\", \"dodgy\", \"dogma\", \"doing\", \"dolly\", \"donor\", \"donut\", \"dopey\", \"doubt\", \"dough\", \"dowdy\", \"dowel\", \"downy\", \"dowry\", \"dozen\", \"draft\", \"drain\", \"drake\", \"drama\", \"drank\", \"drape\", \"drawl\", \"drawn\", \"dread\", \"dream\", \"dress\", \"dried\", \"drier\", \"drift\", \"drill\", \"drink\", \"drive\", \"droit\", \"droll\", \"drone\", \"drool\", \"droop\", \"dross\", \"drove\", \"drown\", \"druid\", \"drunk\", \"dryer\", \"dryly\", \"duchy\", \"dully\", \"dummy\", \"dumpy\", \"dunce\", \"dusky\", \"dusty\", \"dutch\", \"duvet\", \"dwarf\", \"dwell\", \"dwelt\", \"dying\", \"eager\", \"eagle\", \"early\", \"earth\", \"easel\", \"eaten\", \"eater\", \"ebony\", \"eclat\", \"edict\", \"edify\", \"eerie\", \"egret\", \"eight\", \"eject\", \"eking\", \"elate\", \"elbow\", \"elder\", \"elect\", \"elegy\", \"elfin\", \"elide\", \"elite\", \"elope\", \"elude\", \"email\", \"embed\", \"ember\", \"emcee\", \"empty\", \"enact\", \"endow\", \"enema\", \"enemy\", \"enjoy\", \"ennui\", \"ensue\", \"enter\", \"entry\", \"envoy\", \"epoch\", \"epoxy\", \"equal\", \"equip\", \"erase\", \"erect\", \"erode\", \"error\", \"erupt\", \"essay\", \"ester\", \"ether\", \"ethic\", \"ethos\", \"etude\", \"evade\", \"event\", \"every\", \"evict\", \"evoke\", \"exact\", \"exalt\", \"excel\", \"exert\", \"exile\", \"exist\", \"expel\", \"extol\", \"extra\", \"exult\", \"eying\", \"fable\", \"facet\", \"faint\", \"fairy\", \"faith\", \"false\", \"fancy\", \"fanny\", \"farce\", \"fatal\", \"fatty\", \"fault\", \"fauna\", \"favor\", \"feast\", \"fecal\", \"feign\", \"fella\", \"felon\", \"femme\", \"femur\", \"fence\", \"feral\", \"ferry\", \"fetal\", \"fetch\", \"fetid\", \"fetus\", \"fever\", \"fewer\", \"fiber\", \"fibre\", \"ficus\", \"field\", \"fiend\", \"fiery\", \"fifth\", \"fifty\", \"fight\", \"filer\", \"filet\", \"filly\", \"filmy\", \"filth\", \"final\", \"finch\", \"finer\", \"first\", \"fishy\", \"fixer\", \"fizzy\", \"fjord\", \"flack\", \"flail\", \"flair\", \"flake\", \"flaky\", \"flame\", \"flank\", \"flare\", \"flash\", \"flask\", \"fleck\", \"fleet\", \"flesh\", \"flick\", \"flier\", \"fling\", \"flint\", \"flirt\", \"float\", \"flock\", \"flood\", \"floor\", \"flora\", \"floss\", \"flour\", \"flout\", \"flown\", \"fluff\", \"fluid\", \"fluke\", \"flume\", \"flung\", \"flunk\", \"flush\", \"flute\", \"flyer\", \"foamy\", \"focal\", \"focus\", \"foggy\", \"foist\", \"folio\", \"folly\", \"foray\", \"force\", \"forge\", \"forgo\", \"forte\", \"forth\", \"forty\", \"forum\", \"found\", \"foyer\", \"frail\", \"frame\", \"frank\", \"fraud\", \"freak\", \"freed\", \"freer\", \"fresh\", \"friar\", \"fried\", \"frill\", \"frisk\", \"fritz\", \"frock\", \"frond\", \"front\", \"frost\", \"froth\", \"frown\", \"froze\", \"fruit\", \"fudge\", \"fugue\", \"fully\", \"fungi\", \"funky\", \"funny\", \"furor\", \"furry\", \"fussy\", \"fuzzy\", \"gaffe\", \"gaily\", \"gamer\", \"gamma\", \"gamut\", \"gassy\", \"gaudy\", \"gauge\", \"gaunt\", \"gauze\", \"gavel\", \"gawky\", \"gayer\", \"gayly\", \"gazer\", \"gecko\", \"geeky\", \"geese\", \"genie\", \"genre\", \"ghost\", \"ghoul\", \"giant\", \"giddy\", \"gipsy\", \"girly\", \"girth\", \"given\", \"giver\", \"glade\", \"gland\", \"glare\", \"glass\", \"glaze\", \"gleam\", \"glean\", \"glide\", \"glint\", \"gloat\", \"globe\", \"gloom\", \"glory\", \"gloss\", \"glove\", \"glyph\", \"gnash\", \"gnome\", \"godly\", \"going\", \"golem\", \"golly\", \"gonad\", \"goner\", \"goody\", \"gooey\", \"goofy\", \"goose\", \"gorge\", \"gouge\", \"gourd\", \"grace\", \"grade\", \"graft\", \"grail\", \"grain\", \"grand\", \"grant\", \"grape\", \"graph\", \"grasp\", \"grass\", \"grate\", \"grave\", \"gravy\", \"graze\", \"great\", \"greed\", \"green\", \"greet\", \"grief\", \"grill\", \"grime\", \"grimy\", \"grind\", \"gripe\", \"groan\", \"groin\", \"groom\", \"grope\", \"gross\", \"group\", \"grout\", \"grove\", \"growl\", \"grown\", \"gruel\", \"gruff\", \"grunt\", \"guard\", \"guava\", \"guess\", \"guest\", \"guide\", \"guild\", \"guile\", \"guilt\", \"guise\", \"gulch\", \"gully\", \"gumbo\", \"gummy\", \"guppy\", \"gusto\", \"gusty\", \"gypsy\", \"habit\", \"hairy\", \"halve\", \"handy\", \"happy\", \"hardy\", \"harem\", \"harpy\", \"harry\", \"harsh\", \"haste\", \"hasty\", \"hatch\", \"hater\", \"haunt\", \"haute\", \"haven\", \"havoc\", \"hazel\", \"heady\", \"heard\", \"heart\", \"heath\", \"heave\", \"heavy\", \"hedge\", \"hefty\", \"heist\", \"helix\", \"hello\", \"hence\", \"heron\", \"hilly\", \"hinge\", \"hippo\", \"hippy\", \"hitch\", \"hoard\", \"hobby\", \"hoist\", \"holly\", \"homer\", \"honey\", \"honor\", \"horde\", \"horny\", \"horse\", \"hotel\", \"hotly\", \"hound\", \"house\", \"hovel\", \"hover\", \"howdy\", \"human\", \"humid\", \"humor\", \"humph\", \"humus\", \"hunch\", \"hunky\", \"hurry\", \"husky\", \"hussy\", \"hutch\", \"hydro\", \"hyena\", \"hymen\", \"hyper\", \"icily\", \"icing\", \"ideal\", \"idiom\", \"idiot\", \"idler\", \"idyll\", \"igloo\", \"iliac\", \"image\", \"imbue\", \"impel\", \"imply\", \"inane\", \"inbox\", \"incur\", \"index\", \"inept\", \"inert\", \"infer\", \"ingot\", \"inlay\", \"inlet\", \"inner\", \"input\", \"inter\", \"intro\", \"ionic\", \"irate\", \"irony\", \"islet\", \"issue\", \"itchy\", \"ivory\", \"jaunt\", \"jazzy\", \"jelly\", \"jerky\", \"jetty\", \"jewel\", \"jiffy\", \"joint\", \"joist\", \"joker\", \"jolly\", \"joust\", \"judge\", \"juice\", \"juicy\", \"jumbo\", \"jumpy\", \"junta\", \"junto\", \"juror\", \"kappa\", \"karma\", \"kayak\", \"kebab\", \"khaki\", \"kinky\", \"kiosk\", \"kitty\", \"knack\", \"knave\", \"knead\", \"kneed\", \"kneel\", \"knelt\", \"knife\", \"knock\", \"knoll\", \"known\", \"koala\", \"krill\", \"label\", \"labor\", \"laden\", \"ladle\", \"lager\", \"lance\", \"lanky\", \"lapel\", \"lapse\", \"large\", \"larva\", \"lasso\", \"latch\", \"later\", \"lathe\", \"latte\", \"laugh\", \"layer\", \"leach\", \"leafy\", \"leaky\", \"leant\", \"leapt\", \"learn\", \"lease\", \"leash\", \"least\", \"leave\", \"ledge\", \"leech\", \"leery\", \"lefty\", \"legal\", \"leggy\", \"lemon\", \"lemur\", \"leper\", \"level\", \"lever\", \"libel\", \"liege\", \"light\", \"liken\", \"lilac\", \"limbo\", \"limit\", \"linen\", \"liner\", \"lingo\", \"lipid\", \"lithe\", \"liver\", \"livid\", \"llama\", \"loamy\", \"loath\", \"lobby\", \"local\", \"locus\", \"lodge\", \"lofty\", \"logic\", \"login\", \"loopy\", \"loose\", \"lorry\", \"loser\", \"louse\", \"lousy\", \"lover\", \"lower\", \"lowly\", \"loyal\", \"lucid\", \"lucky\", \"lumen\", \"lumpy\", \"lunar\", \"lunch\", \"lunge\", \"lupus\", \"lurch\", \"lurid\", \"lusty\", \"lying\", \"lymph\", \"lynch\", \"lyric\", \"macaw\", \"macho\", \"macro\", \"madam\", \"madly\", \"mafia\", \"magic\", \"magma\", \"maize\", \"major\", \"maker\", \"mambo\", \"mamma\", \"mammy\", \"manga\", \"mange\", \"mango\", \"mangy\", \"mania\", \"manic\", \"manly\", \"manor\", \"maple\", \"march\", \"marry\", \"marsh\", \"mason\", \"masse\", \"match\", \"matey\", \"mauve\", \"maxim\", \"maybe\", \"mayor\", \"mealy\", \"meant\", \"meaty\", \"mecca\", \"medal\", \"media\", \"medic\", \"melee\", \"melon\", \"mercy\", \"merge\", \"merit\", \"merry\", \"metal\", \"meter\", \"metro\", \"micro\", \"midge\", \"midst\", \"might\", \"milky\", \"mimic\", \"mince\", \"miner\", \"minim\", \"minor\", \"minty\", \"minus\", \"mirth\", \"miser\", \"missy\", \"mocha\", \"modal\", \"model\", \"modem\", \"mogul\", \"moist\", \"molar\", \"moldy\", \"money\", \"month\", \"moody\", \"moose\", \"moral\", \"moron\", \"morph\", \"mossy\", \"motel\", \"motif\", \"motor\", \"motto\", \"moult\", \"mound\", \"mount\", \"mourn\", \"mouse\", \"mouth\", \"mover\", \"movie\", \"mower\", \"mucky\", \"mucus\", \"muddy\", \"mulch\", \"mummy\", \"munch\", \"mural\", \"murky\", \"mushy\", \"music\", \"musky\", \"musty\", \"myrrh\", \"nadir\", \"naive\", \"nanny\", \"nasal\", \"nasty\", \"natal\", \"naval\", \"navel\", \"needy\", \"neigh\", \"nerdy\", \"nerve\", \"never\", \"newer\", \"newly\", \"nicer\", \"niche\", \"niece\", \"night\", \"ninja\", \"ninny\", \"ninth\", \"noble\", \"nobly\", \"noise\", \"noisy\", \"nomad\", \"noose\", \"north\", \"nosey\", \"notch\", \"novel\", \"nudge\", \"nurse\", \"nutty\", \"nylon\", \"nymph\", \"oaken\", \"obese\", \"occur\", \"ocean\", \"octal\", \"octet\", \"odder\", \"oddly\", \"offal\", \"offer\", \"often\", \"olden\", \"older\", \"olive\", \"ombre\", \"omega\", \"onion\", \"onset\", \"opera\", \"opine\", \"opium\", \"optic\", \"orbit\", \"order\", \"organ\", \"other\", \"otter\", \"ought\", \"ounce\", \"outdo\", \"outer\", \"outgo\", \"ovary\", \"ovate\", \"overt\", \"ovine\", \"ovoid\", \"owing\", \"owner\", \"oxide\", \"ozone\", \"paddy\", \"pagan\", \"paint\", \"paler\", \"palsy\", \"panel\", \"panic\", \"pansy\", \"papal\", \"paper\", \"parer\", \"parka\", \"parry\", \"parse\", \"party\", \"pasta\", \"paste\", \"pasty\", \"patch\", \"patio\", \"patsy\", \"patty\", \"pause\", \"payee\", \"payer\", \"peace\", \"peach\", \"pearl\", \"pecan\", \"pedal\", \"penal\", \"pence\", \"penne\", \"penny\", \"perch\", \"peril\", \"perky\", \"pesky\", \"pesto\", \"petal\", \"petty\", \"phase\", \"phone\", \"phony\", \"photo\", \"piano\", \"picky\", \"piece\", \"piety\", \"piggy\", \"pilot\", \"pinch\", \"piney\", \"pinky\", \"pinto\", \"piper\", \"pique\", \"pitch\", \"pithy\", \"pivot\", \"pixel\", \"pixie\", \"pizza\", \"place\", \"plaid\", \"plain\", \"plait\", \"plane\", \"plank\", \"plant\", \"plate\", \"plaza\", \"plead\", \"pleat\", \"plied\", \"plier\", \"pluck\", \"plumb\", \"plume\", \"plump\", \"plunk\", \"plush\", \"poesy\", \"point\", \"poise\", \"poker\", \"polar\", \"polka\", \"polyp\", \"pooch\", \"poppy\", \"porch\", \"poser\", \"posit\", \"posse\", \"pouch\", \"pound\", \"pouty\", \"power\", \"prank\", \"prawn\", \"preen\", \"press\", \"price\", \"prick\", \"pride\", \"pried\", \"prime\", \"primo\", \"print\", \"prior\", \"prism\", \"privy\", \"prize\", \"probe\", \"prone\", \"prong\", \"proof\", \"prose\", \"proud\", \"prove\", \"prowl\", \"proxy\", \"prude\", \"prune\", \"psalm\", \"pubic\", \"pudgy\", \"puffy\", \"pulpy\", \"pulse\", \"punch\", \"pupal\", \"pupil\", \"puppy\", \"puree\", \"purer\", \"purge\", \"purse\", \"pushy\", \"putty\", \"pygmy\", \"quack\", \"quail\", \"quake\", \"qualm\", \"quark\", \"quart\", \"quash\", \"quasi\", \"queen\", \"queer\", \"quell\", \"query\", \"quest\", \"queue\", \"quick\", \"quiet\", \"quill\", \"quilt\", \"quirk\", \"quite\", \"quota\", \"quote\", \"quoth\", \"rabbi\", \"rabid\", \"racer\", \"radar\", \"radii\", \"radio\", \"rainy\", \"raise\", \"rajah\", \"rally\", \"ralph\", \"ramen\", \"ranch\", \"randy\", \"range\", \"rapid\", \"rarer\", \"raspy\", \"ratio\", \"ratty\", \"raven\", \"rayon\", \"razor\", \"reach\", \"react\", \"ready\", \"realm\", \"rearm\", \"rebar\", \"rebel\", \"rebus\", \"rebut\", \"recap\", \"recur\", \"recut\", \"reedy\", \"refer\", \"refit\", \"regal\", \"rehab\", \"reign\", \"relax\", \"relay\", \"relic\", \"remit\", \"renal\", \"renew\", \"repay\", \"repel\", \"reply\", \"rerun\", \"reset\", \"resin\", \"retch\", \"retro\", \"retry\", \"reuse\", \"revel\", \"revue\", \"rhino\", \"rhyme\", \"rider\", \"ridge\", \"rifle\", \"right\", \"rigid\", \"rigor\", \"rinse\", \"ripen\", \"riper\", \"risen\", \"riser\", \"risky\", \"rival\", \"river\", \"rivet\", \"roach\", \"roast\", \"robin\", \"robot\", \"rocky\", \"rodeo\", \"roger\", \"rogue\", \"roomy\", \"roost\", \"rotor\", \"rouge\", \"rough\", \"round\", \"rouse\", \"route\", \"rover\", \"rowdy\", \"rower\", \"royal\", \"ruddy\", \"ruder\", \"rugby\", \"ruler\", \"rumba\", \"rumor\", \"rupee\", \"rural\", \"rusty\", \"sadly\", \"safer\", \"saint\", \"salad\", \"sally\", \"salon\", \"salsa\", \"salty\", \"salve\", \"salvo\", \"sandy\", \"saner\", \"sappy\", \"sassy\", \"satin\", \"satyr\", \"sauce\", \"saucy\", \"sauna\", \"saute\", \"savor\", \"savoy\", \"savvy\", \"scald\", \"scale\", \"scalp\", \"scaly\", \"scamp\", \"scant\", \"scare\", \"scarf\", \"scary\", \"scene\", \"scent\", \"scion\", \"scoff\", \"scold\", \"scone\", \"scoop\", \"scope\", \"score\", \"scorn\", \"scour\", \"scout\", \"scowl\", \"scram\", \"scrap\", \"scree\", \"screw\", \"scrub\", \"scrum\", \"scuba\", \"sedan\", \"seedy\", \"segue\", \"seize\", \"semen\", \"sense\", \"sepia\", \"serif\", \"serum\", \"serve\", \"setup\", \"seven\", \"sever\", \"sewer\", \"shack\", \"shade\", \"shady\", \"shaft\", \"shake\", \"shaky\", \"shale\", \"shall\", \"shalt\", \"shame\", \"shank\", \"shape\", \"shard\", \"share\", \"shark\", \"sharp\", \"shave\", \"shawl\", \"shear\", \"sheen\", \"sheep\", \"sheer\", \"sheet\", \"sheik\", \"shelf\", \"shell\", \"shied\", \"shift\", \"shine\", \"shiny\", \"shire\", \"shirk\", \"shirt\", \"shoal\", \"shock\", \"shone\", \"shook\", \"shoot\", \"shore\", \"shorn\", \"short\", \"shout\", \"shove\", \"shown\", \"showy\", \"shrew\", \"shrub\", \"shrug\", \"shuck\", \"shunt\", \"shush\", \"shyly\", \"siege\", \"sieve\", \"sight\", \"sigma\", \"silky\", \"silly\", \"since\", \"sinew\", \"singe\", \"siren\", \"sissy\", \"sixth\", \"sixty\", \"skate\", \"skier\", \"skiff\", \"skill\", \"skimp\", \"skirt\", \"skulk\", \"skull\", \"skunk\", \"slack\", \"slain\", \"slang\", \"slant\", \"slash\", \"slate\", \"slave\", \"sleek\", \"sleep\", \"sleet\", \"slept\", \"slice\", \"slick\", \"slide\", \"slime\", \"slimy\", \"sling\", \"slink\", \"sloop\", \"slope\", \"slosh\", \"sloth\", \"slump\", \"slung\", \"slunk\", \"slurp\", \"slush\", \"slyly\", \"smack\", \"small\", \"smart\", \"smash\", \"smear\", \"smell\", \"smelt\", \"smile\", \"smirk\", \"smite\", \"smith\", \"smock\", \"smoke\", \"smoky\", \"smote\", \"snack\", \"snail\", \"snake\", \"snaky\", \"snare\", \"snarl\", \"sneak\", \"sneer\", \"snide\", \"sniff\", \"snipe\", \"snoop\", \"snore\", \"snort\", \"snout\", \"snowy\", \"snuck\", \"snuff\", \"soapy\", \"sober\", \"soggy\", \"solar\", \"solid\", \"solve\", \"sonar\", \"sonic\", \"sooth\", \"sooty\", \"sorry\", \"sound\", \"south\", \"sower\", \"space\", \"spade\", \"spank\", \"spare\", \"spark\", \"spasm\", \"spawn\", \"speak\", \"spear\", \"speck\", \"speed\", \"spell\", \"spelt\", \"spend\", \"spent\", \"sperm\", \"spice\", \"spicy\", \"spied\", \"spiel\", \"spike\", \"spiky\", \"spill\", \"spilt\", \"spine\", \"spiny\", \"spire\", \"spite\", \"splat\", \"split\", \"spoil\", \"spoke\", \"spoof\", \"spook\", \"spool\", \"spoon\", \"spore\", \"sport\", \"spout\", \"spray\", \"spree\", \"sprig\", \"spunk\", \"spurn\", \"spurt\", \"squad\", \"squat\", \"squib\", \"stack\", \"staff\", \"stage\", \"staid\", \"stain\", \"stair\", \"stake\", \"stale\", \"stalk\", \"stall\", \"stamp\", \"stand\", \"stank\", \"stare\", \"stark\", \"start\", \"stash\", \"state\", \"stave\", \"stead\", \"steak\", \"steal\", \"steam\", \"steed\", \"steel\", \"steep\", \"steer\", \"stein\", \"stern\", \"stick\", \"stiff\", \"still\", \"stilt\", \"sting\", \"stink\", \"stint\", \"stock\", \"stoic\", \"stoke\", \"stole\", \"stomp\", \"stone\", \"stony\", \"stood\", \"stool\", \"stoop\", \"store\", \"stork\", \"storm\", \"story\", \"stout\", \"stove\", \"strap\", \"straw\", \"stray\", \"strip\", \"strut\", \"stuck\", \"study\", \"stuff\", \"stump\", \"stung\", \"stunk\", \"stunt\", \"style\", \"suave\", \"sugar\", \"suing\", \"suite\", \"sulky\", \"sully\", \"sumac\", \"sunny\", \"super\", \"surer\", \"surge\", \"surly\", \"sushi\", \"swami\", \"swamp\", \"swarm\", \"swash\", \"swath\", \"swear\", \"sweat\", \"sweep\", \"sweet\", \"swell\", \"swept\", \"swift\", \"swill\", \"swine\", \"swing\", \"swirl\", \"swish\", \"swoon\", \"swoop\", \"sword\", \"swore\", \"sworn\", \"swung\", \"synod\", \"syrup\", \"tabby\", \"table\", \"taboo\", \"tacit\", \"tacky\", \"taffy\", \"taint\", \"taken\", \"taker\", \"tally\", \"talon\", \"tamer\", \"tango\", \"tangy\", \"taper\", \"tapir\", \"tardy\", \"tarot\", \"taste\", \"tasty\", \"tatty\", \"taunt\", \"tawny\", \"teach\", \"teary\", \"tease\", \"teddy\", \"teeth\", \"tempo\", \"tenet\", \"tenor\", \"tense\", \"tenth\", \"tepee\", \"tepid\", \"terra\", \"terse\", \"testy\", \"thank\", \"theft\", \"their\", \"theme\", \"there\", \"these\", \"theta\", \"thick\", \"thief\", \"thigh\", \"thing\", \"think\", \"third\", \"thong\", \"thorn\", \"those\", \"three\", \"threw\", \"throb\", \"throw\", \"thrum\", \"thumb\", \"thump\", \"thyme\", \"tiara\", \"tibia\", \"tidal\", \"tiger\", \"tight\", \"tilde\", \"timer\", \"timid\", \"tipsy\", \"titan\", \"tithe\", \"title\", \"toast\", \"today\", \"toddy\", \"token\", \"tonal\", \"tonga\", \"tonic\", \"tooth\", \"topaz\", \"topic\", \"torch\", \"torso\", \"torus\", \"total\", \"totem\", \"touch\", \"tough\", \"towel\", \"tower\", \"toxic\", \"toxin\", \"trace\", \"track\", \"tract\", \"trade\", \"trail\", \"train\", \"trait\", \"tramp\", \"trash\", \"trawl\", \"tread\", \"treat\", \"trend\", \"triad\", \"trial\", \"tribe\", \"trice\", \"trick\", \"tried\", \"tripe\", \"trite\", \"troll\", \"troop\", \"trope\", \"trout\", \"trove\", \"truce\", \"truck\", \"truer\", \"truly\", \"trump\", \"trunk\", \"truss\", \"trust\", \"truth\", \"tryst\", \"tubal\", \"tuber\", \"tulip\", \"tulle\", \"tumor\", \"tunic\", \"turbo\", \"tutor\", \"twang\", \"tweak\", \"tweed\", \"tweet\", \"twice\", \"twine\", \"twirl\", \"twist\", \"twixt\", \"tying\", \"udder\", \"ulcer\", \"ultra\", \"umbra\", \"uncle\", \"uncut\", \"under\", \"undid\", \"undue\", \"unfed\", \"unfit\", \"unify\", \"union\", \"unite\", \"unity\", \"unlit\", \"unmet\", \"unset\", \"untie\", \"until\", \"unwed\", \"unzip\", \"upper\", \"upset\", \"urban\", \"urine\", \"usage\", \"usher\", \"using\", \"usual\", \"usurp\", \"utile\", \"utter\", \"vague\", \"valet\", \"valid\", \"valor\", \"value\", \"valve\", \"vapid\", \"vapor\", \"vault\", \"vaunt\", \"vegan\", \"venom\", \"venue\", \"verge\", \"verse\", \"verso\", \"verve\", \"vicar\", \"video\", \"vigil\", \"vigor\", \"villa\", \"vinyl\", \"viola\", \"viper\", \"viral\", \"virus\", \"visit\", \"visor\", \"vista\", \"vital\", \"vivid\", \"vixen\", \"vocal\", \"vodka\", \"vogue\", \"voice\", \"voila\", \"vomit\", \"voter\", \"vouch\", \"vowel\", \"vying\", \"wacky\", \"wafer\", \"wager\", \"wagon\", \"waist\", \"waive\", \"waltz\", \"warty\", \"waste\", \"watch\", \"water\", \"waver\", \"waxen\", \"weary\", \"weave\", \"wedge\", \"weedy\", \"weigh\", \"weird\", \"welch\", \"welsh\", \"wench\", \"whack\", \"whale\", \"wharf\", \"wheat\", \"wheel\", \"whelp\", \"where\", \"which\", \"whiff\", \"while\", \"whine\", \"whiny\", \"whirl\", \"whisk\", \"white\", \"whole\", \"whoop\", \"whose\", \"widen\", \"wider\", \"widow\", \"width\", \"wield\", \"wight\", \"willy\", \"wimpy\", \"wince\", \"winch\", \"windy\", \"wiser\", \"wispy\", \"witch\", \"witty\", \"woken\", \"woman\", \"women\", \"woody\", \"wooer\", \"wooly\", \"woozy\", \"wordy\", \"world\", \"worry\", \"worse\", \"worst\", \"worth\", \"would\", \"wound\", \"woven\", \"wrack\", \"wrath\", \"wreak\", \"wreck\", \"wrest\", \"wring\", \"wrist\", \"write\", \"wrong\", \"wrote\", \"wrung\", \"wryly\", \"yacht\", \"yearn\", \"yeast\", \"yield\", \"young\", \"youth\", \"zebra\", \"zesty\", \"zonal\"]\r\n\r\nexport {\r\n    guesses,\r\n    answers\r\n}","<script lang=\"ts\">\r\n\timport { scale } from \"svelte/transition\";\r\n\timport Popup from \"./popup.svelte\";\r\n\timport Sidebar from \"./sidebar.svelte\";\r\n\timport { answers, guesses } from \"./words\";\r\n\r\n\t/* ---------------------------------- Game ---------------------------------- */\r\n\tclass Game {\r\n\t\tguesses: string[];\r\n\t\tboxes: (\"empty\" | \"correct\" | \"semicorrect\")[][];\r\n\t\tget coloredBoxes() {\r\n\t\t\treturn this.boxes.map((row) =>\r\n\t\t\t\trow.map((color) => {\r\n\t\t\t\t\tswitch (color) {\r\n\t\t\t\t\t\tcase \"correct\":\r\n\t\t\t\t\t\t\treturn \"#AFE1AF\";\r\n\t\t\t\t\t\tcase \"empty\":\r\n\t\t\t\t\t\t\treturn \"#D3D3D3\";\r\n\t\t\t\t\t\tcase \"semicorrect\":\r\n\t\t\t\t\t\t\treturn \"#FFC300\";\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\tword: string;\r\n\t\tstarted: number;\r\n\t\tendTimer: boolean;\r\n\t\tconstructor(public wordLength: number, public maxGuesses: number) {\r\n\t\t\tthis.guesses = [];\r\n\t\t\tthis.boxes = [...Array(maxGuesses)].map(() =>\r\n\t\t\t\t[...Array(wordLength)].map(() => \"empty\")\r\n\t\t\t);\r\n\t\t\tthis.word = answers[Math.floor(Math.random() * answers.length)];\r\n\t\t\tthis.started = Date.now();\r\n\t\t\tthis.endTimer = false;\r\n\t\t\tconsole.log(this.word);\r\n\t\t}\r\n\r\n\t\tvalidateInput(input: string) {\r\n\t\t\tif (!input) return \"Enter something!\";\r\n\t\t\tif (input?.length < this.wordLength) return \"Input too short!\";\r\n\t\t\tif (input?.length > this.wordLength) return \"Input too long!\";\r\n\t\t\tif (this.guesses.includes(input))\r\n\t\t\t\treturn \"Don't waste your guesses!\";\r\n\t\t\tif (!guesses.includes(input))\r\n\t\t\t\treturn `\"${input}\" is not a valid word!`;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\tfunction processInput() {\r\n\t\tif (game.validateInput(input) !== true) return;\r\n\r\n\t\t/* ---------------------------- Reset / add input --------------------------- */\r\n\t\tinputField.value = \"\";\r\n\t\tgame.guesses = [...game.guesses, input];\r\n\r\n\t\t/* -------------------------- Determine the colors -------------------------- */\r\n\t\tfor (let i = 0; i < input.length; i++) {\r\n\t\t\tconst letter = input[i];\r\n\t\t\tconst index = game.word.indexOf(letter);\r\n\r\n\t\t\tif (index === -1) {\r\n\t\t\t\tgame.boxes[game.guesses.length - 1][i] = \"empty\";\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (game.word[i] === letter) {\r\n\t\t\t\tgame.boxes[game.guesses.length - 1][i] = \"correct\";\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet found = false;\r\n\t\t\tfor (let i = 0; i < input.length; i++) {\r\n\t\t\t\tif (game.word[i] === input[i] && input[i] === letter) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (found) {\r\n\t\t\t\tgame.boxes[game.guesses.length - 1][i] = \"empty\";\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tgame.boxes[game.guesses.length - 1][i] = \"semicorrect\";\r\n\t\t}\r\n\r\n\t\t/* ------------------------------- Win / lose ------------------------------- */\r\n\t\tif (input === game.word) {\r\n\t\t\twon = true;\r\n\t\t\tgame.endTimer = true;\r\n\t\t} else if (game.guesses.length >= game.maxGuesses) {\r\n\t\t\tlose = true;\r\n\t\t\tgame.endTimer = true;\r\n\t\t}\r\n\t}\r\n\r\n\tconst game = new Game(5, 6);\r\n\r\n\t/* --------------------------------- Inputs --------------------------------- */\r\n\tlet _input: string;\r\n\tlet input: string;\r\n\t$: input = _input?.toLocaleLowerCase();\r\n\tlet inputField: HTMLInputElement;\r\n\tlet inputValid: true | string = \"Input too short!\";\r\n\t$: inputValid = !won\r\n\t\t? !lose\r\n\t\t\t? game.validateInput(input)\r\n\t\t\t: \"You lost!\"\r\n\t\t: \"You won!\";\r\n\tfunction onKeyPress(event: KeyboardEvent) {\r\n\t\tif (event.code === \"Enter\") processInput();\r\n\t}\r\n\r\n\t/* --------------------------------- Popups --------------------------------- */\r\n\tlet won = false;\r\n\tlet closedWonPopup = false;\r\n\tfunction closeWonPopup() {\r\n\t\tclosedWonPopup = true;\r\n\t}\r\n\r\n\tlet lose = false;\r\n\tlet closedLosePopup = false;\r\n\tfunction closeLosePopup() {\r\n\t\tclosedLosePopup = true;\r\n\t}\r\n</script>\r\n\r\n<main>\r\n\t<!-- Game -->\r\n\t<div\r\n\t\tclass=\"game\"\r\n\t\tstyle=\"--max-guesses: {game.maxGuesses}; --word-length: {game.wordLength}\"\r\n\t>\r\n\t\t{#each game.coloredBoxes as _row, row}\r\n\t\t\t{#each _row as _, column}\r\n\t\t\t\t{#if game.guesses[row]}\r\n\t\t\t\t\t{#key game.guesses[row].charAt(column).toUpperCase()}\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclass=\"box\"\r\n\t\t\t\t\t\t\tstyle=\"--color: {_row[column]}\"\r\n\t\t\t\t\t\t\ttransition:scale\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{game.guesses[row][column].toUpperCase()}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t{/key}\r\n\t\t\t\t{:else}\r\n\t\t\t\t\t<div class=\"box\" style=\"--color: {_row[column]}\" />\r\n\t\t\t\t{/if}\r\n\t\t\t{/each}\r\n\t\t{/each}\r\n\t</div>\r\n\r\n\t<!-- Input -->\r\n\t<div class=\"input\">\r\n\t\t<input\r\n\t\t\tclass=\"inputChildren\"\r\n\t\t\tbind:value={_input}\r\n\t\t\tbind:this={inputField}\r\n\t\t\ton:keypress={onKeyPress}\r\n\t\t\tmaxlength={game.wordLength}\r\n\t\t/>\r\n\t\t{#if inputValid === true}\r\n\t\t\t<button on:click={processInput}>Enter</button>\r\n\t\t{:else}\r\n\t\t\t<button disabled data-tooltip={inputValid}>Enter</button>\r\n\t\t{/if}\r\n\t</div>\r\n\r\n\t<!-- Win / lose popups -->\r\n\t{#if won && !closedWonPopup}\r\n\t\t<Popup\r\n\t\t\tmessage=\"🎉 You won {game.guesses.length === 1\r\n\t\t\t\t? 'first try! (hacker)'\r\n\t\t\t\t: `in ${game.guesses.length} tries!`}\"\r\n\t\t\tonClose={closeWonPopup}\r\n\t\t/>\r\n\t{/if}\r\n\r\n\t{#if lose && !closedLosePopup}\r\n\t\t<Popup\r\n\t\t\tmessage=\"🎈 You lost, the word was {game.word}!\"\r\n\t\t\tonClose={closeLosePopup}\r\n\t\t/>\r\n\t{/if}\r\n\r\n\t<!-- Darkmode -->\r\n\t<Sidebar {game} />\r\n</main>\r\n\r\n<style>\r\n\t.input {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tmargin-top: 15px;\r\n\t}\r\n\r\n\t.inputChildren {\r\n\t\tmargin: 10px;\r\n\t\tmargin-top: 0px;\r\n\t}\r\n\r\n\t.game {\r\n\t\tdisplay: grid;\r\n\r\n\t\tgrid-template-columns: repeat(var(--word-length), 100px);\r\n\t\tgrid-template-rows: repeat(var(--max-guesses), 100px);\r\n\t\tgrid-gap: 10px;\r\n\r\n\t\tjustify-content: center;\r\n\t\talign-content: center;\r\n\t}\r\n\r\n\t.box {\r\n\t\tbackground-color: var(--color);\r\n\t\tborder-radius: 5px;\r\n\r\n\t\tfont-size: 150%;\r\n\t\tcolor: white;\r\n\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\t/* ------------------------------- Background ------------------------------- */\r\n\t:global(body) {\r\n\t\tbackground-color: #fff;\r\n\t\ttransition: background-color 0.3s;\r\n\t}\r\n\r\n\t:global(body.dark-mode) {\r\n\t\tbackground-color: #424549;\r\n\t}\r\n\r\n\t:global([data-tooltip]) {\r\n\t\tposition: relative;\r\n\t\tz-index: 2;\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\t:global([data-tooltip]:before),\r\n\t:global([data-tooltip]:after) {\r\n\t\tvisibility: hidden;\r\n\t\topacity: 0;\r\n\t\tpointer-events: none;\r\n\t\ttransition: 0.2s ease-out;\r\n\t\ttransform: translate(-50%, 5px);\r\n\t}\r\n\r\n\t:global([data-tooltip]:before) {\r\n\t\tposition: absolute;\r\n\t\tbottom: 100%;\r\n\t\tleft: 50%;\r\n\t\tmargin-bottom: 5px;\r\n\t\tpadding: 7px;\r\n\t\twidth: 100%;\r\n\t\tmin-width: 70px;\r\n\t\tmax-width: 250px;\r\n\t\t-webkit-border-radius: 3px;\r\n\t\t-moz-border-radius: 3px;\r\n\t\tborder-radius: 3px;\r\n\t\tbackground-color: #000;\r\n\t\tbackground-color: hsla(0, 0%, 20%, 0.9);\r\n\t\tcolor: #fff;\r\n\t\tcontent: attr(data-tooltip);\r\n\t\ttext-align: center;\r\n\t\tfont-size: 14px;\r\n\t\tline-height: 1.2;\r\n\t\ttransition: 0.2s ease-out;\r\n\t}\r\n\r\n\t:global([data-tooltip]:after) {\r\n\t\tposition: absolute;\r\n\t\tbottom: 100%;\r\n\t\tleft: 50%;\r\n\t\twidth: 0;\r\n\t\tborder-top: 5px solid #000;\r\n\t\tborder-top: 5px solid hsla(0, 0%, 20%, 0.9);\r\n\t\tborder-right: 5px solid transparent;\r\n\t\tborder-left: 5px solid transparent;\r\n\t\tcontent: \" \";\r\n\t\tfont-size: 0;\r\n\t\tline-height: 0;\r\n\t}\r\n\r\n\t:global([data-tooltip]:hover:before),\r\n\t:global([data-tooltip]:hover:after) {\r\n\t\tvisibility: visible;\r\n\t\topacity: 1;\r\n\t\ttransform: translate(-50%, 0);\r\n\t}\r\n\t:global([data-tooltip=\"false\"]:hover:before),\r\n\t:global([data-tooltip=\"false\"]:hover:after) {\r\n\t\tvisibility: hidden;\r\n\t\topacity: 0;\r\n\t}\r\n</style>\r\n","import App from './App.svelte';\r\nconst app = new App({\r\n    target: document.body,\r\n});\r\nexport default app;\r\n"],"names":["noop","identity","x","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","is_client","window","now","performance","Date","raf","cb","requestAnimationFrame","tasks","Set","run_tasks","task","c","delete","f","size","loop","callback","promise","Promise","fulfill","add","abort","append","target","node","appendChild","get_root_for_style","document","root","getRootNode","ownerDocument","host","append_empty_stylesheet","style_element","element","style","head","append_stylesheet","sheet","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","name","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","removeProperty","setProperty","managed_styles","Map","current_component","active","create_rule","duration","delay","ease","uid","step","keyframes","p","t","rule","str","hash","charCodeAt","doc","stylesheet","rules","get","info","set","create_style_information","insertRule","cssRules","animation","delete_rule","previous","split","next","filter","anim","indexOf","deleted","join","deleteRule","clear","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","flushidx","flush","saved_component","update","$$","pop","has","fragment","before_update","dirty","ctx","after_update","wait","then","dispatch","direction","kind","dispatchEvent","type","detail","bubbles","e","createEvent","initCustomEvent","custom_event","outroing","outros","group_outros","r","check_outros","transition_in","block","local","transition_out","o","null_transition","create_bidirectional_transition","params","intro","config","running_program","pending_program","animation_name","clear_animation","init","program","Math","abs","start","end","group","go","easing","tick","css","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","destroy_component","make_dirty","fill","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","callbacks","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","SvelteComponent","$destroy","this","$on","index","splice","$set","$$props","obj","$$set","keys","cubicOut","fade","linear","getComputedStyle","opacity","scale","target_opacity","transform","sd","od","_t","u","running","cleanup","start_time","end_time","started","invalidate","reset","message","onClose","theme","applyTheme","body","classList","remove","matchMedia","matches","localTheme","localStorage","getItem","console","log","setItem","game","timeElapsed","setInterval","endTimer","toISOString","substr","location","reload","guesses","answers","charAt","toUpperCase","word","coloredBoxes","maxGuesses","wordLength","processInput","validateInput","inputField","letter","boxes","found","won","lose","constructor","floor","random","row","color","includes","_input","inputValid","closedWonPopup","closedLosePopup","toLocaleLowerCase","code"],"mappings":"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"}